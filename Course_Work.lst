

Microchip Technology PIC LITE Macro Assembler V1.31 build 56723 
                                                                                               Sun Dec 19 20:54:41 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 56723
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	text28,local,class=CODE,merge=1,delta=2
    40                           	psect	text29,local,class=CODE,merge=1,delta=2
    41                           	psect	text30,local,class=CODE,merge=1,delta=2
    42                           	psect	text31,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     	;# 
    45  0001                     	;# 
    46  0002                     	;# 
    47  0003                     	;# 
    48  0004                     	;# 
    49  0005                     	;# 
    50  0006                     	;# 
    51  0007                     	;# 
    52  0008                     	;# 
    53  0009                     	;# 
    54  000A                     	;# 
    55  000B                     	;# 
    56  000C                     	;# 
    57  000D                     	;# 
    58  000E                     	;# 
    59  000E                     	;# 
    60  000F                     	;# 
    61  0010                     	;# 
    62  0011                     	;# 
    63  0012                     	;# 
    64  0013                     	;# 
    65  0014                     	;# 
    66  0015                     	;# 
    67  0015                     	;# 
    68  0016                     	;# 
    69  0017                     	;# 
    70  0018                     	;# 
    71  0019                     	;# 
    72  001A                     	;# 
    73  001B                     	;# 
    74  001B                     	;# 
    75  001C                     	;# 
    76  001D                     	;# 
    77  001E                     	;# 
    78  001F                     	;# 
    79  0081                     	;# 
    80  0085                     	;# 
    81  0086                     	;# 
    82  0087                     	;# 
    83  0088                     	;# 
    84  0089                     	;# 
    85  008C                     	;# 
    86  008D                     	;# 
    87  008E                     	;# 
    88  0091                     	;# 
    89  0092                     	;# 
    90  0093                     	;# 
    91  0094                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009E                     	;# 
    97  009F                     	;# 
    98  010C                     	;# 
    99  010D                     	;# 
   100  010E                     	;# 
   101  010F                     	;# 
   102  018C                     	;# 
   103  018D                     	;# 
   104                           
   105                           	psect	strings
   106  0003                     __pstrings:	
   107  0003                     stringtab:	
   108  0003                     __stringtab:	
   109                           
   110                           ;	String table - string pointers are 1 byte each
   111  0003  1BFF               	btfsc	btemp+1,7
   112  0004  280D               	ljmp	stringcode
   113  0005  1383               	bcf	3,7
   114  0006  187F               	btfsc	btemp+1,0
   115  0007  1783               	bsf	3,7
   116  0008  0800               	movf	0,w
   117  0009  0A84               	incf	4,f
   118  000A  1903               	skipnz
   119  000B  0AFF               	incf	btemp+1,f
   120  000C  0008               	return
   121  000D                     stringcode:	
   122  000D                     stringdir:	
   123  000D  3000               	movlw	high stringdir
   124  000E  008A               	movwf	10
   125  000F  0804               	movf	4,w
   126  0010  0A84               	incf	4,f
   127  0011  0782               	addwf	2,f
   128  0012                     __stringbase:	
   129  0012  3400               	retlw	0
   130  0013                     __end_of__stringtab:	
   131  0013                     _str_BLANK:	
   132  0013  3420               	retlw	32
   133  0014  3420               	retlw	32
   134  0015  3420               	retlw	32
   135  0016  3420               	retlw	32
   136  0017  3420               	retlw	32
   137  0018  3420               	retlw	32
   138  0019  3420               	retlw	32
   139  001A  3420               	retlw	32
   140  001B  3420               	retlw	32
   141  001C  3420               	retlw	32
   142  001D  3420               	retlw	32
   143  001E  3420               	retlw	32
   144  001F  3420               	retlw	32
   145  0020  3420               	retlw	32
   146  0021  3420               	retlw	32
   147  0022  3420               	retlw	32
   148  0023  3400               	retlw	0
   149  0024                     __end_of_str_BLANK:	
   150  0006                     _PORTB	set	6
   151  0007                     _PORTC	set	7
   152  0031                     _RB1	set	49
   153  0032                     _RB2	set	50
   154  003C                     _RC4	set	60
   155  0086                     _TRISB	set	134
   156  0087                     _TRISC	set	135
   157  043B                     _TRISC3	set	1083
   158  043C                     _TRISC4	set	1084
   159                           
   160                           	psect	cinit
   161  07ED                     start_initialization:	
   162                           ; #config settings
   163                           
   164  07ED                     __initialization:	
   165                           
   166                           ; Clear objects allocated to BANK0
   167  07ED  1383               	bcf	3,7	;select IRP bank0
   168  07EE  3020               	movlw	low __pbssBANK0
   169  07EF  0084               	movwf	4
   170  07F0  3048               	movlw	low (__pbssBANK0+40)
   171  07F1  120A  118A  20CF   	fcall	clear_ram0
      +       120A  118A         
   172                           
   173                           ; Clear objects allocated to BANK1
   174  07F6  30A0               	movlw	low __pbssBANK1
   175  07F7  0084               	movwf	4
   176  07F8  30F0               	movlw	low (__pbssBANK1+80)
   177  07F9  120A  118A  20CF   	fcall	clear_ram0
   178  07FC                     end_of_initialization:	
   179                           ;End of C runtime variable initialization code
   180                           
   181  07FC                     __end_of__initialization:	
   182  07FC  0183               	clrf	3
   183  07FD  120A  118A  2CB6   	ljmp	_main	;jump to C main() function
   184                           
   185                           	psect	bssBANK0
   186  0020                     __pbssBANK0:	
   187  0020                     _int_res:	
   188  0020                     	ds	4
   189  0024                     _Adr_I2C:	
   190  0024                     	ds	2
   191  0026                     _cnt0:	
   192  0026                     	ds	2
   193  0028                     _cntA:	
   194  0028                     	ds	2
   195  002A                     _deg:	
   196  002A                     	ds	2
   197  002C                     _ind:	
   198  002C                     	ds	2
   199  002E                     _ind2:	
   200  002E                     	ds	2
   201  0030                     _step:	
   202  0030                     	ds	2
   203  0032                     _stlb:	
   204  0032                     	ds	2
   205  0034                     _str:	
   206  0034                     	ds	2
   207  0036                     _Ch_ACK:	
   208  0036                     	ds	1
   209  0037                     _Slave_ADR_RW_I2C:	
   210  0037                     	ds	1
   211  0038                     _str_line0:	
   212  0038                     	ds	16
   213                           
   214                           	psect	bssBANK1
   215  00A0                     __pbssBANK1:	
   216  00A0                     _int_arr:	
   217  00A0                     	ds	64
   218  00E0                     _str_line1:	
   219  00E0                     	ds	16
   220                           
   221                           	psect	clrtext
   222  00CF                     clear_ram0:	
   223                           ;	Called with FSR containing the base address, and
   224                           ;	W with the last address+1
   225                           
   226  00CF  0064               	clrwdt	;clear the watchdog before getting into this loop
   227  00D0                     clrloop0:	
   228  00D0  0180               	clrf	0	;clear RAM location pointed to by FSR
   229  00D1  0A84               	incf	4,f	;increment pointer
   230  00D2  0604               	xorwf	4,w	;XOR with final address
   231  00D3  1903               	btfsc	3,2	;have we reached the end yet?
   232  00D4  3400               	retlw	0	;all done for this memory range, return
   233  00D5  0604               	xorwf	4,w	;XOR again to restore value
   234  00D6  28D0               	goto	clrloop0	;do the next byte
   235                           
   236                           	psect	cstackCOMMON
   237  0070                     __pcstackCOMMON:	
   238  0070                     ?_Init_LCD:	
   239  0070                     ?_init_I2C:	
   240                           ; 0 bytes @ 0x0
   241                           
   242  0070                     ??_init_I2C:	
   243                           ; 0 bytes @ 0x0
   244                           
   245  0070                     ?_Restart:	
   246                           ; 0 bytes @ 0x0
   247                           
   248  0070                     ?_Clr_LCD:	
   249                           ; 0 bytes @ 0x0
   250                           
   251  0070                     ?_OUT_BYTE_PAGE_I2C:	
   252                           ; 0 bytes @ 0x0
   253                           
   254  0070                     ?_STOP_I2C:	
   255                           ; 0 bytes @ 0x0
   256                           
   257  0070                     ??_Check_buttons:	
   258                           ; 0 bytes @ 0x0
   259                           
   260  0070                     ?_Send_Command_LCD:	
   261                           ; 0 bytes @ 0x0
   262                           
   263  0070                     ?_START_I2C:	
   264                           ; 0 bytes @ 0x0
   265                           
   266  0070                     ?_OUT_BYTE_I2C:	
   267                           ; 0 bytes @ 0x0
   268                           
   269  0070                     ?_HIGH_SDA_I2C:	
   270                           ; 0 bytes @ 0x0
   271                           
   272  0070                     ?_HIGH_SCL_I2C:	
   273                           ; 0 bytes @ 0x0
   274                           
   275  0070                     ?_LOW_SDA_I2C:	
   276                           ; 0 bytes @ 0x0
   277                           
   278  0070                     ?_LOW_SCL_I2C:	
   279                           ; 0 bytes @ 0x0
   280                           
   281  0070                     ?_Delay_Fast:	
   282                           ; 0 bytes @ 0x0
   283                           
   284  0070                     ??_Delay_Fast:	
   285                           ; 0 bytes @ 0x0
   286                           
   287  0070                     ?_ACK_I2C:	
   288                           ; 0 bytes @ 0x0
   289                           
   290  0070                     ?_NACK_I2C:	
   291                           ; 0 bytes @ 0x0
   292                           
   293  0070                     ?_CLOCK_PULSE_I2C:	
   294                           ; 0 bytes @ 0x0
   295                           
   296  0070                     ?_Check_ACK_I2C:	
   297                           ; 0 bytes @ 0x0
   298                           
   299  0070                     ?_main:	
   300                           ; 0 bytes @ 0x0
   301                           
   302  0070                     ?_Delay:	
   303                           ; 0 bytes @ 0x0
   304                           
   305  0070                     ?_Send_Byte_LCD:	
   306                           ; 0 bytes @ 0x0
   307                           
   308  0070                     ?_IN_BYTE_ACK_I2C:	
   309                           ; 0 bytes @ 0x0
   310                           
   311  0070                     ?_IN_BYTE_NACK_STOP_I2C:	
   312                           ; 1 bytes @ 0x0
   313                           
   314  0070                     ?_Check_buttons:	
   315                           ; 1 bytes @ 0x0
   316                           
   317  0070                     ?_IN_BYTE_I2C:	
   318                           ; 1 bytes @ 0x0
   319                           
   320  0070                     ?___lmul:	
   321                           ; 1 bytes @ 0x0
   322                           
   323  0070                     Delay_Fast@i:	
   324                           ; 4 bytes @ 0x0
   325                           
   326  0070                     Delay@tmp:	
   327                           ; 1 bytes @ 0x0
   328                           
   329  0070                     ___lmul@multiplier:	
   330                           ; 2 bytes @ 0x0
   331                           
   332                           
   333                           ; 4 bytes @ 0x0
   334  0070                     	ds	1
   335  0071                     ??_HIGH_SDA_I2C:	
   336  0071                     ??_HIGH_SCL_I2C:	
   337                           ; 0 bytes @ 0x1
   338                           
   339  0071                     ??_LOW_SDA_I2C:	
   340                           ; 0 bytes @ 0x1
   341                           
   342  0071                     ??_LOW_SCL_I2C:	
   343                           ; 0 bytes @ 0x1
   344                           
   345  0071                     Check_buttons@tmp:	
   346                           ; 0 bytes @ 0x1
   347                           
   348                           
   349                           ; 1 bytes @ 0x1
   350  0071                     	ds	1
   351  0072                     ??_STOP_I2C:	
   352  0072                     ??_START_I2C:	
   353                           ; 0 bytes @ 0x2
   354                           
   355  0072                     ??_OUT_BYTE_I2C:	
   356                           ; 0 bytes @ 0x2
   357                           
   358  0072                     ??_IN_BYTE_I2C:	
   359                           ; 0 bytes @ 0x2
   360                           
   361  0072                     ??_ACK_I2C:	
   362                           ; 0 bytes @ 0x2
   363                           
   364  0072                     ??_NACK_I2C:	
   365                           ; 0 bytes @ 0x2
   366                           
   367  0072                     ??_CLOCK_PULSE_I2C:	
   368                           ; 0 bytes @ 0x2
   369                           
   370  0072                     ??_Check_ACK_I2C:	
   371                           ; 0 bytes @ 0x2
   372                           
   373  0072                     ??_Delay:	
   374                           ; 0 bytes @ 0x2
   375                           
   376  0072                     ?_Pulse:	
   377                           ; 0 bytes @ 0x2
   378                           
   379  0072                     Check_buttons@tmp_PORTB:	
   380                           ; 0 bytes @ 0x2
   381                           
   382  0072                     Pulse@x:	
   383                           ; 1 bytes @ 0x2
   384                           
   385                           
   386                           ; 2 bytes @ 0x2
   387  0072                     	ds	1
   388  0073                     Check_buttons@tmp_TRISB:	
   389  0073                     IN_BYTE_I2C@tmp:	
   390                           ; 1 bytes @ 0x3
   391                           
   392  0073                     OUT_BYTE_I2C@tmp:	
   393                           ; 1 bytes @ 0x3
   394                           
   395                           
   396                           ; 1 bytes @ 0x3
   397  0073                     	ds	1
   398  0074                     ??_Send_Command_LCD:	
   399  0074                     ??_Pulse:	
   400                           ; 0 bytes @ 0x4
   401                           
   402  0074                     ??_Send_Byte_LCD:	
   403                           ; 0 bytes @ 0x4
   404                           
   405  0074                     IN_BYTE_I2C@t:	
   406                           ; 0 bytes @ 0x4
   407                           
   408  0074                     OUT_BYTE_I2C@t:	
   409                           ; 1 bytes @ 0x4
   410                           
   411  0074                     ___lmul@multiplicand:	
   412                           ; 1 bytes @ 0x4
   413                           
   414                           
   415                           ; 4 bytes @ 0x4
   416  0074                     	ds	1
   417  0075                     ?_Init_WRITE_I2C:	
   418  0075                     ??_IN_BYTE_ACK_I2C:	
   419                           ; 0 bytes @ 0x5
   420                           
   421  0075                     ??_IN_BYTE_NACK_STOP_I2C:	
   422                           ; 0 bytes @ 0x5
   423                           
   424  0075                     Init_WRITE_I2C@Adr_begin:	
   425                           ; 0 bytes @ 0x5
   426                           
   427                           
   428                           ; 2 bytes @ 0x5
   429  0075                     	ds	1
   430  0076                     Send_Command_LCD@tmp:	
   431  0076                     Send_Byte_LCD@tmp:	
   432                           ; 1 bytes @ 0x6
   433                           
   434  0076                     IN_BYTE_ACK_I2C@t:	
   435                           ; 1 bytes @ 0x6
   436                           
   437  0076                     IN_BYTE_NACK_STOP_I2C@t:	
   438                           ; 1 bytes @ 0x6
   439                           
   440                           
   441                           ; 1 bytes @ 0x6
   442  0076                     	ds	1
   443  0077                     ??_Init_LCD:	
   444  0077                     ?_Show_String_LCD:	
   445                           ; 0 bytes @ 0x7
   446                           
   447  0077                     ?_Set_Coord_LCD:	
   448                           ; 0 bytes @ 0x7
   449                           
   450  0077                     ??_Init_WRITE_I2C:	
   451                           ; 0 bytes @ 0x7
   452                           
   453  0077                     Set_Coord_LCD@j:	
   454                           ; 0 bytes @ 0x7
   455                           
   456  0077                     Show_String_LCD@mySTRING:	
   457                           ; 1 bytes @ 0x7
   458                           
   459                           
   460                           ; 2 bytes @ 0x7
   461  0077                     	ds	1
   462  0078                     ??_Set_Coord_LCD:	
   463  0078                     ??_OUT_BYTE_PAGE_I2C:	
   464                           ; 0 bytes @ 0x8
   465                           
   466  0078                     ?_Init_READ_I2C:	
   467                           ; 0 bytes @ 0x8
   468                           
   469  0078                     ??___lmul:	
   470                           ; 0 bytes @ 0x8
   471                           
   472  0078                     Set_Coord_LCD@i:	
   473                           ; 0 bytes @ 0x8
   474                           
   475  0078                     Init_READ_I2C@Adr_begin:	
   476                           ; 1 bytes @ 0x8
   477                           
   478                           
   479                           ; 2 bytes @ 0x8
   480  0078                     	ds	1
   481  0079                     ??_Show_String_LCD:	
   482  0079                     ??_Clr_LCD:	
   483                           ; 0 bytes @ 0x9
   484                           
   485  0079                     Clr_LCD@str_:	
   486                           ; 0 bytes @ 0x9
   487                           
   488  0079                     ___lmul@product:	
   489                           ; 1 bytes @ 0x9
   490                           
   491                           
   492                           ; 4 bytes @ 0x9
   493  0079                     	ds	1
   494  007A                     ??_Restart:	
   495  007A                     ??_Init_READ_I2C:	
   496                           ; 0 bytes @ 0xA
   497                           
   498  007A                     OUT_BYTE_PAGE_I2C@tmp:	
   499                           ; 0 bytes @ 0xA
   500                           
   501                           
   502                           ; 1 bytes @ 0xA
   503  007A                     	ds	2
   504  007C                     Restart@i:	
   505                           
   506                           ; 2 bytes @ 0xC
   507  007C                     	ds	1
   508  007D                     ??_power:	
   509                           
   510                           ; 0 bytes @ 0xD
   511  007D                     	ds	1
   512                           
   513                           	psect	cstackBANK0
   514  0048                     __pcstackBANK0:	
   515  0048                     ?_power:	
   516  0048                     power@x:	
   517                           ; 4 bytes @ 0x0
   518                           
   519                           
   520                           ; 4 bytes @ 0x0
   521  0048                     	ds	4
   522  004C                     power@n:	
   523                           
   524                           ; 2 bytes @ 0x4
   525  004C                     	ds	2
   526  004E                     power@a:	
   527                           
   528                           ; 4 bytes @ 0x6
   529  004E                     	ds	4
   530  0052                     ??_main:	
   531                           
   532                           ; 0 bytes @ 0xA
   533  0052                     	ds	5
   534  0057                     _main$616:	
   535                           
   536                           ; 4 bytes @ 0xF
   537  0057                     	ds	4
   538  005B                     main@i:	
   539                           
   540                           ; 2 bytes @ 0x13
   541  005B                     	ds	2
   542  005D                     main@i_166:	
   543                           
   544                           ; 2 bytes @ 0x15
   545  005D                     	ds	2
   546  005F                     main@i_167:	
   547                           
   548                           ; 2 bytes @ 0x17
   549  005F                     	ds	2
   550  0061                     main@i_168:	
   551                           
   552                           ; 2 bytes @ 0x19
   553  0061                     	ds	2
   554                           
   555                           	psect	maintext
   556  04B6                     __pmaintext:	
   557 ;;
   558 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   559 ;;
   560 ;; *************** function _main *****************
   561 ;; Defined at:
   562 ;;		line 84 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
   563 ;; Parameters:    Size  Location     Type
   564 ;;		None
   565 ;; Auto vars:     Size  Location     Type
   566 ;;  i               2   25[BANK0 ] int 
   567 ;;  i               2   23[BANK0 ] int 
   568 ;;  i               2   21[BANK0 ] int 
   569 ;;  i               2   19[BANK0 ] int 
   570 ;; Return value:  Size  Location     Type
   571 ;;		None               void
   572 ;; Registers used:
   573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   574 ;; Tracked objects:
   575 ;;		On entry : 17F/0
   576 ;;		On exit  : 0/0
   577 ;;		Unchanged: 0/0
   578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   579 ;;      Params:         0       0       0       0       0
   580 ;;      Locals:         0      12       0       0       0
   581 ;;      Temps:          0       5       0       0       0
   582 ;;      Totals:         0      17       0       0       0
   583 ;;Total ram usage:       17 bytes
   584 ;; Hardware stack levels required when called:    6
   585 ;; This function calls:
   586 ;;		_Check_buttons
   587 ;;		_Clr_LCD
   588 ;;		_IN_BYTE_ACK_I2C
   589 ;;		_IN_BYTE_NACK_STOP_I2C
   590 ;;		_Init_LCD
   591 ;;		_Init_READ_I2C
   592 ;;		_Init_WRITE_I2C
   593 ;;		_OUT_BYTE_PAGE_I2C
   594 ;;		_Restart
   595 ;;		_STOP_I2C
   596 ;;		_Set_Coord_LCD
   597 ;;		_Show_String_LCD
   598 ;;		___lmul
   599 ;;		_init_I2C
   600 ;;		_power
   601 ;; This function is called by:
   602 ;;		Startup code after reset
   603 ;; This function uses a non-reentrant model
   604 ;;
   605                           
   606                           
   607                           ;psect for function _main
   608  04B6                     _main:	
   609                           
   610                           ;main.c: 86: Init_LCD();
   611                           
   612                           ;incstack = 0
   613                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   614  04B6  120A  118A  23AA   	fcall	_Init_LCD
      +       120A  118A         
   615                           
   616                           ;main.c: 88: Slave_ADR_RW_I2C = 0xA0;
   617  04BB  30A0               	movlw	160
   618  04BC  1283               	bcf	3,5	;RP0=0, select bank0
   619  04BD  1303               	bcf	3,6	;RP1=0, select bank0
   620  04BE  00D2               	movwf	??_main
   621  04BF  0852               	movf	??_main,w
   622  04C0  00B7               	movwf	_Slave_ADR_RW_I2C
   623                           
   624                           ;main.c: 89: TRISC=0x9B;
   625  04C1  309B               	movlw	155
   626  04C2  1683               	bsf	3,5	;RP0=1, select bank1
   627  04C3  1303               	bcf	3,6	;RP1=0, select bank1
   628  04C4  0087               	movwf	7	;volatile
   629                           
   630                           ;main.c: 90: init_I2C();
   631  04C5  120A  118A  20C7   	fcall	_init_I2C
      +       120A  118A         
   632  04CA  2FCA               	goto	l1551
   633  04CB                     l1553:	
   634                           
   635                           ;main.c: 95: {
   636                           ;main.c: 96: str_line0[ind] = '0';
   637  04CB  3030               	movlw	48
   638  04CC  00D2               	movwf	??_main
   639  04CD  082C               	movf	_ind,w
   640  04CE  3E38               	addlw	_str_line0& (0+255)
   641  04CF  0084               	movwf	4
   642  04D0  0852               	movf	??_main,w
   643  04D1  1383               	bcf	3,7	;select IRP bank0
   644  04D2  0080               	movwf	0
   645                           
   646                           ;main.c: 97: Show_String_LCD(str_line0);
   647  04D3  3038               	movlw	_str_line0& (0+255)
   648  04D4  00F7               	movwf	Show_String_LCD@mySTRING
   649  04D5  3000               	movlw	0
   650  04D6  00F8               	movwf	Show_String_LCD@mySTRING+1
   651  04D7  120A  118A  21D1   	fcall	_Show_String_LCD
      +       120A  118A         
   652                           
   653                           ;main.c: 98: Set_Coord_LCD(str, stlb);
   654  04DC  1283               	bcf	3,5	;RP0=0, select bank0
   655  04DD  1303               	bcf	3,6	;RP1=0, select bank0
   656  04DE  0832               	movf	_stlb,w
   657  04DF  00D2               	movwf	??_main
   658  04E0  0852               	movf	??_main,w
   659  04E1  00F7               	movwf	Set_Coord_LCD@j
   660  04E2  0834               	movf	_str,w
   661  04E3  120A  118A  2119   	fcall	_Set_Coord_LCD
      +       120A  118A         
   662                           
   663                           ;main.c: 99: step = 1;
   664  04E8  3001               	movlw	1
   665  04E9  1283               	bcf	3,5	;RP0=0, select bank0
   666  04EA  1303               	bcf	3,6	;RP1=0, select bank0
   667  04EB  00B0               	movwf	_step
   668  04EC  3000               	movlw	0
   669  04ED  00B1               	movwf	_step+1
   670                           
   671                           ;main.c: 100: }
   672                           ;main.c: 102: switch ((unsigned int)Check_buttons())
   673  04EE  2FD0               	goto	l1713
   674  04EF                     l1561:	
   675                           ;main.c: 103: {
   676                           ;main.c: 105: case 1:
   677                           
   678                           
   679                           ;main.c: 107: if (step == 2)
   680  04EF  3002               	movlw	2
   681  04F0  0630               	xorwf	_step,w
   682  04F1  0431               	iorwf	_step+1,w
   683  04F2  1D03               	skipz
   684  04F3  2CFA               	goto	l1565
   685                           
   686                           ;main.c: 108: {
   687                           ;main.c: 109: Restart();
   688  04F4  120A  118A  23F9   	fcall	_Restart
      +       120A  118A         
   689                           
   690                           ;main.c: 110: }
   691  04F9  2FCA               	goto	l1551
   692  04FA                     l1565:	
   693                           
   694                           ;main.c: 111: else
   695                           ;main.c: 112: {
   696                           ;main.c: 113: cnt0++;
   697  04FA  3001               	movlw	1
   698  04FB  1283               	bcf	3,5	;RP0=0, select bank0
   699  04FC  1303               	bcf	3,6	;RP1=0, select bank0
   700  04FD  07A6               	addwf	_cnt0,f
   701  04FE  1803               	skipnc
   702  04FF  0AA7               	incf	_cnt0+1,f
   703  0500  3000               	movlw	0
   704  0501  07A7               	addwf	_cnt0+1,f
   705                           
   706                           ;main.c: 114: if (cnt0 < 10)
   707  0502  3000               	movlw	0
   708  0503  0227               	subwf	_cnt0+1,w
   709  0504  300A               	movlw	10
   710  0505  1903               	skipnz
   711  0506  0226               	subwf	_cnt0,w
   712  0507  1803               	skipnc
   713  0508  2D13               	goto	l1569
   714                           
   715                           ;main.c: 115: {
   716                           ;main.c: 116: str_line0[ind] = cnt0 + '0';
   717  0509  0826               	movf	_cnt0,w
   718  050A  3E30               	addlw	48
   719  050B  00D2               	movwf	??_main
   720  050C  082C               	movf	_ind,w
   721  050D  3E38               	addlw	_str_line0& (0+255)
   722  050E  0084               	movwf	4
   723  050F  0852               	movf	??_main,w
   724  0510  1383               	bcf	3,7	;select IRP bank0
   725  0511  0080               	movwf	0
   726                           
   727                           ;main.c: 117: }
   728  0512  2D2F               	goto	l1577
   729  0513                     l1569:	
   730                           
   731                           ;main.c: 118: else if (cnt0 < 16)
   732  0513  3000               	movlw	0
   733  0514  0227               	subwf	_cnt0+1,w
   734  0515  3010               	movlw	16
   735  0516  1903               	skipnz
   736  0517  0226               	subwf	_cnt0,w
   737  0518  1803               	skipnc
   738  0519  2D2A               	goto	l1575
   739                           
   740                           ;main.c: 119: {
   741                           ;main.c: 120: str_line0[ind] = cntA + 'A';
   742  051A  0828               	movf	_cntA,w
   743  051B  3E41               	addlw	65
   744  051C  00D2               	movwf	??_main
   745  051D  082C               	movf	_ind,w
   746  051E  3E38               	addlw	_str_line0& (0+255)
   747  051F  0084               	movwf	4
   748  0520  0852               	movf	??_main,w
   749  0521  1383               	bcf	3,7	;select IRP bank0
   750  0522  0080               	movwf	0
   751                           
   752                           ;main.c: 121: cntA++;
   753  0523  3001               	movlw	1
   754  0524  07A8               	addwf	_cntA,f
   755  0525  1803               	skipnc
   756  0526  0AA9               	incf	_cntA+1,f
   757  0527  3000               	movlw	0
   758  0528  07A9               	addwf	_cntA+1,f
   759                           
   760                           ;main.c: 122: }
   761  0529  2D2F               	goto	l1577
   762  052A                     l1575:	
   763                           
   764                           ;main.c: 123: else
   765                           ;main.c: 124: {
   766                           ;main.c: 125: cnt0 = 0;
   767  052A  01A6               	clrf	_cnt0
   768  052B  01A7               	clrf	_cnt0+1
   769                           
   770                           ;main.c: 126: cntA = 0;
   771  052C  01A8               	clrf	_cntA
   772  052D  01A9               	clrf	_cntA+1
   773  052E  2D9D               	goto	L1
   774  052F                     l1577:	
   775                           ;main.c: 129: break;
   776                           
   777                           ;main.c: 128: step = 0;
   778                           
   779                           
   780                           ;main.c: 130: }
   781                           ;main.c: 131: Clr_LCD(0);
   782  052F  3000               	movlw	0
   783  0530  120A  118A  216F   	fcall	_Clr_LCD
      +       120A  118A         
   784                           
   785                           ;main.c: 132: Show_String_LCD(str_line0);
   786  0535  3038               	movlw	_str_line0& (0+255)
   787  0536  00F7               	movwf	Show_String_LCD@mySTRING
   788  0537  3000               	movlw	0
   789  0538  00F8               	movwf	Show_String_LCD@mySTRING+1
   790  0539  120A  118A  21D1   	fcall	_Show_String_LCD
      +       120A  118A         
   791                           
   792                           ;main.c: 133: Set_Coord_LCD(str, stlb);
   793  053E  1283               	bcf	3,5	;RP0=0, select bank0
   794  053F  1303               	bcf	3,6	;RP1=0, select bank0
   795  0540  0832               	movf	_stlb,w
   796  0541  00D2               	movwf	??_main
   797  0542  0852               	movf	??_main,w
   798  0543  00F7               	movwf	Set_Coord_LCD@j
   799  0544  0834               	movf	_str,w
   800  0545  120A  118A  2119   	fcall	_Set_Coord_LCD
      +       120A  118A         
   801                           
   802                           ;main.c: 134: }
   803                           ;main.c: 135: break;
   804  054A  2FCA               	goto	l1551
   805  054B                     l1581:	
   806                           ;main.c: 137: case 2:
   807                           
   808                           
   809                           ;main.c: 139: if(step == 2)
   810  054B  3002               	movlw	2
   811  054C  1283               	bcf	3,5	;RP0=0, select bank0
   812  054D  1303               	bcf	3,6	;RP1=0, select bank0
   813  054E  0630               	xorwf	_step,w
   814  054F  0431               	iorwf	_step+1,w
   815  0550  1D03               	skipz
   816  0551  2D58               	goto	l1585
   817                           
   818                           ;main.c: 140: {
   819                           ;main.c: 141: Restart();
   820  0552  120A  118A  23F9   	fcall	_Restart
      +       120A  118A         
   821                           
   822                           ;main.c: 142: break;
   823  0557  2FCA               	goto	l1551
   824  0558                     l1585:	
   825                           
   826                           ;main.c: 143: }
   827                           ;main.c: 145: if (ind < 7)
   828  0558  1283               	bcf	3,5	;RP0=0, select bank0
   829  0559  1303               	bcf	3,6	;RP1=0, select bank0
   830  055A  082D               	movf	_ind+1,w
   831  055B  3A80               	xorlw	128
   832  055C  00FF               	movwf	127
   833  055D  3080               	movlw	128
   834  055E  027F               	subwf	127,w
   835  055F  1D03               	skipz
   836  0560  2D63               	goto	u915
   837  0561  3007               	movlw	7
   838  0562  022C               	subwf	_ind,w
   839  0563                     u915:	
   840  0563  1803               	skipnc
   841  0564  2DA0               	goto	l1601
   842                           
   843                           ;main.c: 146: {
   844                           ;main.c: 147: int_arr[ind] = cnt0;
   845  0565  1283               	bcf	3,5	;RP0=0, select bank0
   846  0566  1303               	bcf	3,6	;RP1=0, select bank0
   847  0567  0826               	movf	_cnt0,w
   848  0568  00D2               	movwf	??_main
   849  0569  0827               	movf	_cnt0+1,w
   850  056A  00D3               	movwf	??_main+1
   851  056B  01D4               	clrf	??_main+2
   852  056C  01D5               	clrf	??_main+3
   853  056D  082C               	movf	_ind,w
   854  056E  00D6               	movwf	??_main+4
   855  056F  3001               	movlw	1
   856  0570                     u925:	
   857  0570  1003               	clrc
   858  0571  0DD6               	rlf	??_main+4,f
   859  0572  3EFF               	addlw	-1
   860  0573  1D03               	skipz
   861  0574  2D70               	goto	u925
   862  0575  1003               	clrc
   863  0576  0D56               	rlf	??_main+4,w
   864  0577  3EA0               	addlw	_int_arr& (0+255)
   865  0578  0084               	movwf	4
   866  0579  0852               	movf	??_main,w
   867  057A  1383               	bcf	3,7	;select IRP bank1
   868  057B  0080               	movwf	0
   869  057C  0A84               	incf	4,f
   870  057D  0853               	movf	??_main+1,w
   871  057E  0080               	movwf	0
   872  057F  0A84               	incf	4,f
   873  0580  0854               	movf	??_main+2,w
   874  0581  0080               	movwf	0
   875  0582  0A84               	incf	4,f
   876  0583  0855               	movf	??_main+3,w
   877  0584  0080               	movwf	0
   878                           
   879                           ;main.c: 148: cnt0 = 0;
   880  0585  01A6               	clrf	_cnt0
   881  0586  01A7               	clrf	_cnt0+1
   882                           
   883                           ;main.c: 149: cntA = 0;
   884  0587  01A8               	clrf	_cntA
   885  0588  01A9               	clrf	_cntA+1
   886                           
   887                           ;main.c: 150: ind++;
   888  0589  3001               	movlw	1
   889  058A  07AC               	addwf	_ind,f
   890  058B  1803               	skipnc
   891  058C  0AAD               	incf	_ind+1,f
   892  058D  3000               	movlw	0
   893  058E  07AD               	addwf	_ind+1,f
   894                           
   895                           ;main.c: 151: stlb++;
   896  058F  3001               	movlw	1
   897  0590  07B2               	addwf	_stlb,f
   898  0591  1803               	skipnc
   899  0592  0AB3               	incf	_stlb+1,f
   900  0593  3000               	movlw	0
   901  0594  07B3               	addwf	_stlb+1,f
   902                           
   903                           ;main.c: 153: Clr_LCD(0);
   904  0595  3000               	movlw	0
   905  0596  120A  118A  216F   	fcall	_Clr_LCD
      +       120A  118A         
   906                           
   907                           ;main.c: 154: step = 0;
   908  059B  1283               	bcf	3,5	;RP0=0, select bank0
   909  059C  1303               	bcf	3,6	;RP1=0, select bank0
   910  059D                     L1:	
   911  059D  01B0               	clrf	_step
   912  059E  01B1               	clrf	_step+1
   913                           
   914                           ;main.c: 155: break;
   915  059F  2FCA               	goto	l1551
   916  05A0                     l1601:	
   917                           ;main.c: 156: }
   918                           ;main.c: 158: case 4:
   919                           
   920                           
   921                           ;main.c: 160: if(step == 2)
   922  05A0  3002               	movlw	2
   923  05A1  1283               	bcf	3,5	;RP0=0, select bank0
   924  05A2  1303               	bcf	3,6	;RP1=0, select bank0
   925  05A3  0630               	xorwf	_step,w
   926  05A4  0431               	iorwf	_step+1,w
   927  05A5  1D03               	skipz
   928  05A6  2DAD               	goto	l1605
   929                           
   930                           ;main.c: 161: {
   931                           ;main.c: 162: Restart();
   932  05A7  120A  118A  23F9   	fcall	_Restart
      +       120A  118A         
   933                           
   934                           ;main.c: 163: break;
   935  05AC  2FCA               	goto	l1551
   936  05AD                     l1605:	
   937                           
   938                           ;main.c: 164: }
   939                           ;main.c: 166: step = 2;
   940  05AD  3002               	movlw	2
   941  05AE  1283               	bcf	3,5	;RP0=0, select bank0
   942  05AF  1303               	bcf	3,6	;RP1=0, select bank0
   943  05B0  00B0               	movwf	_step
   944  05B1  3000               	movlw	0
   945  05B2  00B1               	movwf	_step+1
   946                           
   947                           ;main.c: 167: int_arr[ind] = cnt0;
   948  05B3  0826               	movf	_cnt0,w
   949  05B4  00D2               	movwf	??_main
   950  05B5  0827               	movf	_cnt0+1,w
   951  05B6  00D3               	movwf	??_main+1
   952  05B7  01D4               	clrf	??_main+2
   953  05B8  01D5               	clrf	??_main+3
   954  05B9  082C               	movf	_ind,w
   955  05BA  00D6               	movwf	??_main+4
   956  05BB  3001               	movlw	1
   957  05BC                     u945:	
   958  05BC  1003               	clrc
   959  05BD  0DD6               	rlf	??_main+4,f
   960  05BE  3EFF               	addlw	-1
   961  05BF  1D03               	skipz
   962  05C0  2DBC               	goto	u945
   963  05C1  1003               	clrc
   964  05C2  0D56               	rlf	??_main+4,w
   965  05C3  3EA0               	addlw	_int_arr& (0+255)
   966  05C4  0084               	movwf	4
   967  05C5  0852               	movf	??_main,w
   968  05C6  1383               	bcf	3,7	;select IRP bank1
   969  05C7  0080               	movwf	0
   970  05C8  0A84               	incf	4,f
   971  05C9  0853               	movf	??_main+1,w
   972  05CA  0080               	movwf	0
   973  05CB  0A84               	incf	4,f
   974  05CC  0854               	movf	??_main+2,w
   975  05CD  0080               	movwf	0
   976  05CE  0A84               	incf	4,f
   977  05CF  0855               	movf	??_main+3,w
   978  05D0  0080               	movwf	0
   979                           
   980                           ;main.c: 168: Set_Coord_LCD(1, 0);
   981  05D1  01F7               	clrf	Set_Coord_LCD@j
   982  05D2  3001               	movlw	1
   983  05D3  120A  118A  2119   	fcall	_Set_Coord_LCD
      +       120A  118A         
   984  05D8                     l1619:	
   985                           ;main.c: 170: while(ind >= 0)
   986                           
   987  05D8  1283               	bcf	3,5	;RP0=0, select bank0
   988  05D9  1303               	bcf	3,6	;RP1=0, select bank0
   989  05DA  1BAD               	btfsc	_ind+1,7
   990  05DB  2E76               	goto	l1627
   991                           
   992                           ;main.c: 171: {
   993                           ;main.c: 172: int_res += int_arr[ind--] * power(16, deg++);
   994  05DC  1283               	bcf	3,5	;RP0=0, select bank0
   995  05DD  1303               	bcf	3,6	;RP1=0, select bank0
   996  05DE  082B               	movf	_deg+1,w
   997  05DF  01CD               	clrf	power@n+1
   998  05E0  07CD               	addwf	power@n+1,f
   999  05E1  082A               	movf	_deg,w
  1000  05E2  01CC               	clrf	power@n
  1001  05E3  07CC               	addwf	power@n,f
  1002  05E4  3000               	movlw	0
  1003  05E5  00CB               	movwf	power@x+3
  1004  05E6  3000               	movlw	0
  1005  05E7  00CA               	movwf	power@x+2
  1006  05E8  3000               	movlw	0
  1007  05E9  00C9               	movwf	power@x+1
  1008  05EA  3010               	movlw	16
  1009  05EB  00C8               	movwf	power@x
  1010  05EC  120A  118A  2450   	fcall	_power
      +       120A  118A         
  1011  05F1  1283               	bcf	3,5	;RP0=0, select bank0
  1012  05F2  1303               	bcf	3,6	;RP1=0, select bank0
  1013  05F3  084B               	movf	?_power+3,w
  1014  05F4  00DA               	movwf	_main$616+3
  1015  05F5  084A               	movf	?_power+2,w
  1016  05F6  00D9               	movwf	_main$616+2
  1017  05F7  0849               	movf	?_power+1,w
  1018  05F8  00D8               	movwf	_main$616+1
  1019  05F9  0848               	movf	?_power,w
  1020  05FA  00D7               	movwf	_main$616
  1021                           
  1022                           ;main.c: 171: {
  1023                           ;main.c: 172: int_res += int_arr[ind--] * power(16, deg++);
  1024  05FB  085A               	movf	_main$616+3,w
  1025  05FC  00F3               	movwf	___lmul@multiplier+3
  1026  05FD  0859               	movf	_main$616+2,w
  1027  05FE  00F2               	movwf	___lmul@multiplier+2
  1028  05FF  0858               	movf	_main$616+1,w
  1029  0600  00F1               	movwf	___lmul@multiplier+1
  1030  0601  0857               	movf	_main$616,w
  1031  0602  00F0               	movwf	___lmul@multiplier
  1032  0603  082C               	movf	_ind,w
  1033  0604  00D2               	movwf	??_main
  1034  0605  3001               	movlw	1
  1035  0606                     u955:	
  1036  0606  1003               	clrc
  1037  0607  0DD2               	rlf	??_main,f
  1038  0608  3EFF               	addlw	-1
  1039  0609  1D03               	skipz
  1040  060A  2E06               	goto	u955
  1041  060B  1003               	clrc
  1042  060C  0D52               	rlf	??_main,w
  1043  060D  3EA0               	addlw	_int_arr& (0+255)
  1044  060E  0084               	movwf	4
  1045  060F  1383               	bcf	3,7	;select IRP bank1
  1046  0610  0800               	movf	0,w
  1047  0611  00F4               	movwf	___lmul@multiplicand
  1048  0612  0A84               	incf	4,f
  1049  0613  0800               	movf	0,w
  1050  0614  00F5               	movwf	___lmul@multiplicand+1
  1051  0615  0A84               	incf	4,f
  1052  0616  0800               	movf	0,w
  1053  0617  00F6               	movwf	___lmul@multiplicand+2
  1054  0618  0A84               	incf	4,f
  1055  0619  0800               	movf	0,w
  1056  061A  00F7               	movwf	___lmul@multiplicand+3
  1057  061B  120A  118A  22DA   	fcall	___lmul
      +       120A  118A         
  1058  0620  0870               	movf	?___lmul,w
  1059  0621  1283               	bcf	3,5	;RP0=0, select bank0
  1060  0622  1303               	bcf	3,6	;RP1=0, select bank0
  1061  0623  07A0               	addwf	_int_res,f
  1062  0624  0871               	movf	?___lmul+1,w
  1063  0625  1103               	clrz
  1064  0626  1803               	skipnc
  1065  0627  3E01               	addlw	1
  1066  0628  1D03               	btfss	3,2
  1067  0629  07A1               	addwf	_int_res+1,f
  1068  062A  0872               	movf	?___lmul+2,w
  1069  062B  1103               	clrz
  1070  062C  1803               	skipnc
  1071  062D  3E01               	addlw	1
  1072  062E  1D03               	btfss	3,2
  1073  062F  07A2               	addwf	_int_res+2,f
  1074  0630  0873               	movf	?___lmul+3,w
  1075  0631  1103               	clrz
  1076  0632  1803               	skipnc
  1077  0633  3E01               	addlw	1
  1078  0634  1D03               	btfss	3,2
  1079  0635  07A3               	addwf	_int_res+3,f
  1080  0636  3001               	movlw	1
  1081  0637  07AA               	addwf	_deg,f
  1082  0638  1803               	skipnc
  1083  0639  0AAB               	incf	_deg+1,f
  1084  063A  3000               	movlw	0
  1085  063B  07AB               	addwf	_deg+1,f
  1086  063C  30FF               	movlw	255
  1087  063D  07AC               	addwf	_ind,f
  1088  063E  1803               	skipnc
  1089  063F  0AAD               	incf	_ind+1,f
  1090  0640  30FF               	movlw	255
  1091  0641  07AD               	addwf	_ind+1,f
  1092  0642  2DD8               	goto	l1619
  1093  0643                     l1621:	
  1094                           ;main.c: 173: }
  1095                           ;main.c: 175: while (int_res > 8)
  1096                           
  1097                           
  1098                           ;main.c: 176: {
  1099                           ;main.c: 177: int_arr[ind2] = int_res % 8;
  1100  0643  3007               	movlw	7
  1101  0644  0520               	andwf	_int_res,w
  1102  0645  00D2               	movwf	??_main
  1103  0646  3000               	movlw	0
  1104  0647  0521               	andwf	_int_res+1,w
  1105  0648  00D3               	movwf	??_main+1
  1106  0649  3000               	movlw	0
  1107  064A  0522               	andwf	_int_res+2,w
  1108  064B  00D4               	movwf	??_main+2
  1109  064C  3000               	movlw	0
  1110  064D  0523               	andwf	_int_res+3,w
  1111  064E  00D5               	movwf	??_main+3
  1112  064F  082E               	movf	_ind2,w
  1113  0650  00D6               	movwf	??_main+4
  1114  0651  3001               	movlw	1
  1115  0652                     u985:	
  1116  0652  1003               	clrc
  1117  0653  0DD6               	rlf	??_main+4,f
  1118  0654  3EFF               	addlw	-1
  1119  0655  1D03               	skipz
  1120  0656  2E52               	goto	u985
  1121  0657  1003               	clrc
  1122  0658  0D56               	rlf	??_main+4,w
  1123  0659  3EA0               	addlw	_int_arr& (0+255)
  1124  065A  0084               	movwf	4
  1125  065B  0852               	movf	??_main,w
  1126  065C  1383               	bcf	3,7	;select IRP bank1
  1127  065D  0080               	movwf	0
  1128  065E  0A84               	incf	4,f
  1129  065F  0853               	movf	??_main+1,w
  1130  0660  0080               	movwf	0
  1131  0661  0A84               	incf	4,f
  1132  0662  0854               	movf	??_main+2,w
  1133  0663  0080               	movwf	0
  1134  0664  0A84               	incf	4,f
  1135  0665  0855               	movf	??_main+3,w
  1136  0666  0080               	movwf	0
  1137                           
  1138                           ;main.c: 178: int_res /= 8;
  1139  0667  3003               	movlw	3
  1140  0668                     u995:	
  1141  0668  1003               	clrc
  1142  0669  0CA3               	rrf	_int_res+3,f
  1143  066A  0CA2               	rrf	_int_res+2,f
  1144  066B  0CA1               	rrf	_int_res+1,f
  1145  066C  0CA0               	rrf	_int_res,f
  1146  066D  3EFF               	addlw	-1
  1147  066E  1D03               	skipz
  1148  066F  2E68               	goto	u995
  1149                           
  1150                           ;main.c: 179: ind2++;
  1151  0670  3001               	movlw	1
  1152  0671  07AE               	addwf	_ind2,f
  1153  0672  1803               	skipnc
  1154  0673  0AAF               	incf	_ind2+1,f
  1155  0674  3000               	movlw	0
  1156  0675  07AF               	addwf	_ind2+1,f
  1157  0676                     l1627:	
  1158  0676  3000               	movlw	0
  1159  0677  0223               	subwf	_int_res+3,w
  1160  0678  1D03               	skipz
  1161  0679  2E84               	goto	u1005
  1162  067A  3000               	movlw	0
  1163  067B  0222               	subwf	_int_res+2,w
  1164  067C  1D03               	skipz
  1165  067D  2E84               	goto	u1005
  1166  067E  3000               	movlw	0
  1167  067F  0221               	subwf	_int_res+1,w
  1168  0680  1D03               	skipz
  1169  0681  2E84               	goto	u1005
  1170  0682  3009               	movlw	9
  1171  0683  0220               	subwf	_int_res,w
  1172  0684                     u1005:	
  1173  0684  1803               	skipnc
  1174  0685  2E43               	goto	l1621
  1175                           
  1176                           ;main.c: 180: }
  1177                           ;main.c: 181: int_arr[ind2] = int_res;
  1178  0686  082E               	movf	_ind2,w
  1179  0687  00D2               	movwf	??_main
  1180  0688  3001               	movlw	1
  1181  0689                     u1015:	
  1182  0689  1003               	clrc
  1183  068A  0DD2               	rlf	??_main,f
  1184  068B  3EFF               	addlw	-1
  1185  068C  1D03               	skipz
  1186  068D  2E89               	goto	u1015
  1187  068E  1003               	clrc
  1188  068F  0D52               	rlf	??_main,w
  1189  0690  3EA0               	addlw	_int_arr& (0+255)
  1190  0691  0084               	movwf	4
  1191  0692  0820               	movf	_int_res,w
  1192  0693  1383               	bcf	3,7	;select IRP bank1
  1193  0694  0080               	movwf	0
  1194  0695  0A84               	incf	4,f
  1195  0696  0821               	movf	_int_res+1,w
  1196  0697  0080               	movwf	0
  1197  0698  0A84               	incf	4,f
  1198  0699  0822               	movf	_int_res+2,w
  1199  069A  0080               	movwf	0
  1200  069B  0A84               	incf	4,f
  1201  069C  0823               	movf	_int_res+3,w
  1202  069D  0080               	movwf	0
  1203                           
  1204                           ;main.c: 183: ind = 0;
  1205  069E  01AC               	clrf	_ind
  1206  069F  01AD               	clrf	_ind+1
  1207  06A0                     l1639:	
  1208                           ;main.c: 184: while(ind2 >= 0)
  1209                           
  1210  06A0  1BAF               	btfsc	_ind2+1,7
  1211  06A1  2FC1               	goto	L2
  1212                           
  1213                           ;main.c: 185: {
  1214                           ;main.c: 186: str_line1[ind++] = int_arr[ind2--] + '0';
  1215  06A2  082E               	movf	_ind2,w
  1216  06A3  00D2               	movwf	??_main
  1217  06A4  3001               	movlw	1
  1218  06A5                     u1025:	
  1219  06A5  1003               	clrc
  1220  06A6  0DD2               	rlf	??_main,f
  1221  06A7  3EFF               	addlw	-1
  1222  06A8  1D03               	skipz
  1223  06A9  2EA5               	goto	u1025
  1224  06AA  1003               	clrc
  1225  06AB  0D52               	rlf	??_main,w
  1226  06AC  3EA0               	addlw	_int_arr& (0+255)
  1227  06AD  0084               	movwf	4
  1228  06AE  0800               	movf	0,w
  1229  06AF  3E30               	addlw	48
  1230  06B0  00D3               	movwf	??_main+1
  1231  06B1  082C               	movf	_ind,w
  1232  06B2  3EE0               	addlw	_str_line1& (0+255)
  1233  06B3  0084               	movwf	4
  1234  06B4  0853               	movf	??_main+1,w
  1235  06B5  0080               	movwf	0
  1236  06B6  30FF               	movlw	255
  1237  06B7  07AE               	addwf	_ind2,f
  1238  06B8  1803               	skipnc
  1239  06B9  0AAF               	incf	_ind2+1,f
  1240  06BA  30FF               	movlw	255
  1241  06BB  07AF               	addwf	_ind2+1,f
  1242  06BC  3001               	movlw	1
  1243  06BD  07AC               	addwf	_ind,f
  1244  06BE  1803               	skipnc
  1245  06BF  0AAD               	incf	_ind+1,f
  1246  06C0  3000               	movlw	0
  1247  06C1  07AD               	addwf	_ind+1,f
  1248  06C2  2EA0               	goto	l1639
  1249  06C3                     l1643:	
  1250                           ;main.c: 192: case 8:
  1251                           
  1252                           ;main.c: 190: break;
  1253                           
  1254                           ;main.c: 187: }
  1255                           ;main.c: 189: Show_String_LCD(str_line1);
  1256                           
  1257                           
  1258                           ;main.c: 193: if(step == 2)
  1259  06C3  3002               	movlw	2
  1260  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  1261  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  1262  06C6  0630               	xorwf	_step,w
  1263  06C7  0431               	iorwf	_step+1,w
  1264  06C8  1D03               	skipz
  1265  06C9  2F35               	goto	l1673
  1266                           
  1267                           ;main.c: 194: {
  1268                           ;main.c: 195: Init_WRITE_I2C(0);
  1269  06CA  3000               	movlw	0
  1270  06CB  00F5               	movwf	Init_WRITE_I2C@Adr_begin
  1271  06CC  3000               	movlw	0
  1272  06CD  00F6               	movwf	Init_WRITE_I2C@Adr_begin+1
  1273  06CE  120A  118A  2319   	fcall	_Init_WRITE_I2C
      +       120A  118A         
  1274                           
  1275                           ;main.c: 197: for (int i = 0; i < 16; i++)
  1276  06D3  1283               	bcf	3,5	;RP0=0, select bank0
  1277  06D4  1303               	bcf	3,6	;RP1=0, select bank0
  1278  06D5  01DB               	clrf	main@i
  1279  06D6  01DC               	clrf	main@i+1
  1280  06D7  085C               	movf	main@i+1,w
  1281  06D8  3A80               	xorlw	128
  1282  06D9  00FF               	movwf	127
  1283  06DA  3080               	movlw	128
  1284  06DB  027F               	subwf	127,w
  1285  06DC  1D03               	skipz
  1286  06DD  2EE0               	goto	u1055
  1287  06DE  3010               	movlw	16
  1288  06DF  025B               	subwf	main@i,w
  1289  06E0                     u1055:	
  1290  06E0  1803               	btfsc	3,0
  1291  06E1  2F01               	goto	l1659
  1292  06E2                     l1653:	
  1293                           
  1294                           ;main.c: 198: {
  1295                           ;main.c: 199: OUT_BYTE_PAGE_I2C(str_line0[i]);
  1296  06E2  1283               	bcf	3,5	;RP0=0, select bank0
  1297  06E3  1303               	bcf	3,6	;RP1=0, select bank0
  1298  06E4  085B               	movf	main@i,w
  1299  06E5  3E38               	addlw	_str_line0& (0+255)
  1300  06E6  0084               	movwf	4
  1301  06E7  1383               	bcf	3,7	;select IRP bank0
  1302  06E8  0800               	movf	0,w
  1303  06E9  120A  118A  2247   	fcall	_OUT_BYTE_PAGE_I2C
      +       120A  118A         
  1304  06EE  3001               	movlw	1
  1305  06EF  1283               	bcf	3,5	;RP0=0, select bank0
  1306  06F0  1303               	bcf	3,6	;RP1=0, select bank0
  1307  06F1  07DB               	addwf	main@i,f
  1308  06F2  1803               	skipnc
  1309  06F3  0ADC               	incf	main@i+1,f
  1310  06F4  3000               	movlw	0
  1311  06F5  07DC               	addwf	main@i+1,f
  1312  06F6  085C               	movf	main@i+1,w
  1313  06F7  3A80               	xorlw	128
  1314  06F8  00FF               	movwf	127
  1315  06F9  3080               	movlw	128
  1316  06FA  027F               	subwf	127,w
  1317  06FB  1D03               	skipz
  1318  06FC  2EFF               	goto	u1065
  1319  06FD  3010               	movlw	16
  1320  06FE  025B               	subwf	main@i,w
  1321  06FF                     u1065:	
  1322  06FF  1C03               	skipc
  1323  0700  2EE2               	goto	l1653
  1324  0701                     l1659:	
  1325                           
  1326                           ;main.c: 200: }
  1327                           ;main.c: 202: for (int i = 0; i < 16; i++)
  1328  0701  1283               	bcf	3,5	;RP0=0, select bank0
  1329  0702  1303               	bcf	3,6	;RP1=0, select bank0
  1330  0703  01DD               	clrf	main@i_166
  1331  0704  01DE               	clrf	main@i_166+1
  1332  0705  085E               	movf	main@i_166+1,w
  1333  0706  3A80               	xorlw	128
  1334  0707  00FF               	movwf	127
  1335  0708  3080               	movlw	128
  1336  0709  027F               	subwf	127,w
  1337  070A  1D03               	skipz
  1338  070B  2F0E               	goto	u1075
  1339  070C  3010               	movlw	16
  1340  070D  025D               	subwf	main@i_166,w
  1341  070E                     u1075:	
  1342  070E  1803               	btfsc	3,0
  1343  070F  2F2F               	goto	l1671
  1344  0710                     l1665:	
  1345                           
  1346                           ;main.c: 203: {
  1347                           ;main.c: 204: OUT_BYTE_PAGE_I2C(str_line1[i]);
  1348  0710  1283               	bcf	3,5	;RP0=0, select bank0
  1349  0711  1303               	bcf	3,6	;RP1=0, select bank0
  1350  0712  085D               	movf	main@i_166,w
  1351  0713  3EE0               	addlw	_str_line1& (0+255)
  1352  0714  0084               	movwf	4
  1353  0715  1383               	bcf	3,7	;select IRP bank1
  1354  0716  0800               	movf	0,w
  1355  0717  120A  118A  2247   	fcall	_OUT_BYTE_PAGE_I2C
      +       120A  118A         
  1356  071C  3001               	movlw	1
  1357  071D  1283               	bcf	3,5	;RP0=0, select bank0
  1358  071E  1303               	bcf	3,6	;RP1=0, select bank0
  1359  071F  07DD               	addwf	main@i_166,f
  1360  0720  1803               	skipnc
  1361  0721  0ADE               	incf	main@i_166+1,f
  1362  0722  3000               	movlw	0
  1363  0723  07DE               	addwf	main@i_166+1,f
  1364  0724  085E               	movf	main@i_166+1,w
  1365  0725  3A80               	xorlw	128
  1366  0726  00FF               	movwf	127
  1367  0727  3080               	movlw	128
  1368  0728  027F               	subwf	127,w
  1369  0729  1D03               	skipz
  1370  072A  2F2D               	goto	u1085
  1371  072B  3010               	movlw	16
  1372  072C  025D               	subwf	main@i_166,w
  1373  072D                     u1085:	
  1374  072D  1C03               	skipc
  1375  072E  2F10               	goto	l1665
  1376  072F                     l1671:	
  1377                           
  1378                           ;main.c: 205: }
  1379                           ;main.c: 207: STOP_I2C();
  1380  072F  120A  118A  2186   	fcall	_STOP_I2C
      +       120A  118A         
  1381                           
  1382                           ;main.c: 208: }
  1383  0734  2FCA               	goto	l1551
  1384  0735                     l1673:	
  1385                           
  1386                           ;main.c: 209: else
  1387                           ;main.c: 210: {
  1388                           ;main.c: 211: step = 2;
  1389  0735  3002               	movlw	2
  1390  0736  1283               	bcf	3,5	;RP0=0, select bank0
  1391  0737  1303               	bcf	3,6	;RP1=0, select bank0
  1392  0738  00B0               	movwf	_step
  1393  0739  3000               	movlw	0
  1394  073A  00B1               	movwf	_step+1
  1395                           
  1396                           ;main.c: 213: Init_READ_I2C(0);
  1397  073B  3000               	movlw	0
  1398  073C  00F8               	movwf	Init_READ_I2C@Adr_begin
  1399  073D  3000               	movlw	0
  1400  073E  00F9               	movwf	Init_READ_I2C@Adr_begin+1
  1401  073F  120A  118A  219E   	fcall	_Init_READ_I2C
      +       120A  118A         
  1402                           
  1403                           ;main.c: 215: for (int i = 0; i < 16; i++)
  1404  0744  1283               	bcf	3,5	;RP0=0, select bank0
  1405  0745  1303               	bcf	3,6	;RP1=0, select bank0
  1406  0746  01DF               	clrf	main@i_167
  1407  0747  01E0               	clrf	main@i_167+1
  1408  0748  0860               	movf	main@i_167+1,w
  1409  0749  3A80               	xorlw	128
  1410  074A  00FF               	movwf	127
  1411  074B  3080               	movlw	128
  1412  074C  027F               	subwf	127,w
  1413  074D  1D03               	skipz
  1414  074E  2F51               	goto	u1095
  1415  074F  3010               	movlw	16
  1416  0750  025F               	subwf	main@i_167,w
  1417  0751                     u1095:	
  1418  0751  1803               	btfsc	3,0
  1419  0752  2F72               	goto	l1689
  1420  0753                     l1683:	
  1421                           
  1422                           ;main.c: 216: {
  1423                           ;main.c: 217: str_line0[i] = IN_BYTE_ACK_I2C();
  1424  0753  120A  118A  20FD   	fcall	_IN_BYTE_ACK_I2C
      +       120A  118A         
  1425  0758  1283               	bcf	3,5	;RP0=0, select bank0
  1426  0759  1303               	bcf	3,6	;RP1=0, select bank0
  1427  075A  00D2               	movwf	??_main
  1428  075B  085F               	movf	main@i_167,w
  1429  075C  3E38               	addlw	_str_line0& (0+255)
  1430  075D  0084               	movwf	4
  1431  075E  0852               	movf	??_main,w
  1432  075F  1383               	bcf	3,7	;select IRP bank0
  1433  0760  0080               	movwf	0
  1434  0761  3001               	movlw	1
  1435  0762  07DF               	addwf	main@i_167,f
  1436  0763  1803               	skipnc
  1437  0764  0AE0               	incf	main@i_167+1,f
  1438  0765  3000               	movlw	0
  1439  0766  07E0               	addwf	main@i_167+1,f
  1440  0767  0860               	movf	main@i_167+1,w
  1441  0768  3A80               	xorlw	128
  1442  0769  00FF               	movwf	127
  1443  076A  3080               	movlw	128
  1444  076B  027F               	subwf	127,w
  1445  076C  1D03               	skipz
  1446  076D  2F70               	goto	u1105
  1447  076E  3010               	movlw	16
  1448  076F  025F               	subwf	main@i_167,w
  1449  0770                     u1105:	
  1450  0770  1C03               	skipc
  1451  0771  2F53               	goto	l1683
  1452  0772                     l1689:	
  1453                           
  1454                           ;main.c: 218: }
  1455                           ;main.c: 220: for (int i = 0; i < 16; i++)
  1456  0772  1283               	bcf	3,5	;RP0=0, select bank0
  1457  0773  1303               	bcf	3,6	;RP1=0, select bank0
  1458  0774  01E1               	clrf	main@i_168
  1459  0775  01E2               	clrf	main@i_168+1
  1460  0776  0862               	movf	main@i_168+1,w
  1461  0777  3A80               	xorlw	128
  1462  0778  00FF               	movwf	127
  1463  0779  3080               	movlw	128
  1464  077A  027F               	subwf	127,w
  1465  077B  1D03               	skipz
  1466  077C  2F7F               	goto	u1115
  1467  077D  3010               	movlw	16
  1468  077E  0261               	subwf	main@i_168,w
  1469  077F                     u1115:	
  1470  077F  1803               	btfsc	3,0
  1471  0780  2FA0               	goto	l1701
  1472  0781                     l1695:	
  1473                           
  1474                           ;main.c: 221: {
  1475                           ;main.c: 222: str_line1[i] = IN_BYTE_ACK_I2C();
  1476  0781  120A  118A  20FD   	fcall	_IN_BYTE_ACK_I2C
      +       120A  118A         
  1477  0786  1283               	bcf	3,5	;RP0=0, select bank0
  1478  0787  1303               	bcf	3,6	;RP1=0, select bank0
  1479  0788  00D2               	movwf	??_main
  1480  0789  0861               	movf	main@i_168,w
  1481  078A  3EE0               	addlw	_str_line1& (0+255)
  1482  078B  0084               	movwf	4
  1483  078C  0852               	movf	??_main,w
  1484  078D  1383               	bcf	3,7	;select IRP bank1
  1485  078E  0080               	movwf	0
  1486  078F  3001               	movlw	1
  1487  0790  07E1               	addwf	main@i_168,f
  1488  0791  1803               	skipnc
  1489  0792  0AE2               	incf	main@i_168+1,f
  1490  0793  3000               	movlw	0
  1491  0794  07E2               	addwf	main@i_168+1,f
  1492  0795  0862               	movf	main@i_168+1,w
  1493  0796  3A80               	xorlw	128
  1494  0797  00FF               	movwf	127
  1495  0798  3080               	movlw	128
  1496  0799  027F               	subwf	127,w
  1497  079A  1D03               	skipz
  1498  079B  2F9E               	goto	u1125
  1499  079C  3010               	movlw	16
  1500  079D  0261               	subwf	main@i_168,w
  1501  079E                     u1125:	
  1502  079E  1C03               	skipc
  1503  079F  2F81               	goto	l1695
  1504  07A0                     l1701:	
  1505                           
  1506                           ;main.c: 223: }
  1507                           ;main.c: 225: IN_BYTE_NACK_STOP_I2C();
  1508  07A0  120A  118A  213A   	fcall	_IN_BYTE_NACK_STOP_I2C
      +       120A  118A         
  1509                           
  1510                           ;main.c: 226: Clr_LCD(0);
  1511  07A5  3000               	movlw	0
  1512  07A6  120A  118A  216F   	fcall	_Clr_LCD
      +       120A  118A         
  1513                           
  1514                           ;main.c: 227: Show_String_LCD(str_line0);
  1515  07AB  3038               	movlw	_str_line0& (0+255)
  1516  07AC  00F7               	movwf	Show_String_LCD@mySTRING
  1517  07AD  3000               	movlw	0
  1518  07AE  00F8               	movwf	Show_String_LCD@mySTRING+1
  1519  07AF  120A  118A  21D1   	fcall	_Show_String_LCD
      +       120A  118A         
  1520                           
  1521                           ;main.c: 228: Clr_LCD(1);
  1522  07B4  3001               	movlw	1
  1523  07B5  120A  118A  216F   	fcall	_Clr_LCD
      +       120A  118A         
  1524                           
  1525                           ;main.c: 229: Set_Coord_LCD(1, 0);
  1526  07BA  01F7               	clrf	Set_Coord_LCD@j
  1527  07BB  3001               	movlw	1
  1528  07BC  120A  118A  2119   	fcall	_Set_Coord_LCD
      +       120A  118A         
  1529  07C1                     L2:	
  1530                           
  1531                           ;main.c: 230: Show_String_LCD(str_line1);
  1532  07C1  30E0               	movlw	_str_line1& (0+255)
  1533  07C2  00F7               	movwf	Show_String_LCD@mySTRING
  1534  07C3  3000               	movlw	0
  1535  07C4  00F8               	movwf	Show_String_LCD@mySTRING+1
  1536  07C5  120A  118A  21D1   	fcall	_Show_String_LCD
      +       120A  118A         
  1537  07CA                     l1551:	
  1538                           ;main.c: 92: while(1)
  1539                           
  1540                           ;main.c: 236: };
  1541                           
  1542                           ;main.c: 235: break;
  1543                           
  1544                           ;main.c: 234: default:
  1545                           
  1546                           ;main.c: 231: }
  1547                           ;main.c: 232: break;
  1548                           
  1549                           
  1550                           ;main.c: 93: {
  1551                           ;main.c: 94: if (step == 0)
  1552  07CA  1283               	bcf	3,5	;RP0=0, select bank0
  1553  07CB  1303               	bcf	3,6	;RP1=0, select bank0
  1554  07CC  0831               	movf	_step+1,w
  1555  07CD  0430               	iorwf	_step,w
  1556  07CE  1903               	btfsc	3,2
  1557  07CF  2CCB               	goto	l1553
  1558  07D0                     l1713:	
  1559  07D0  120A  118A  221D   	fcall	_Check_buttons
      +       120A  118A         
  1560  07D5  1283               	bcf	3,5	;RP0=0, select bank0
  1561  07D6  1303               	bcf	3,6	;RP1=0, select bank0
  1562  07D7  00D2               	movwf	??_main
  1563  07D8  01D3               	clrf	??_main+1
  1564                           
  1565                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1566                           ; Switch size 1, requested type "space"
  1567                           ; Number of cases is 1, Range of values is 0 to 0
  1568                           ; switch strategies available:
  1569                           ; Name         Instructions Cycles
  1570                           ; simple_byte            4     3 (average)
  1571                           ; direct_byte           11     8 (fixed)
  1572                           ; jumptable            260     6 (fixed)
  1573                           ;	Chosen strategy is simple_byte
  1574  07D9  0853               	movf	??_main+1,w
  1575  07DA  3A00               	xorlw	0	; case 0
  1576  07DB  1903               	skipnz
  1577  07DC  2FDE               	goto	l1739
  1578  07DD  2FCA               	goto	l1551
  1579  07DE                     l1739:	
  1580                           
  1581                           ; Switch size 1, requested type "space"
  1582                           ; Number of cases is 4, Range of values is 1 to 8
  1583                           ; switch strategies available:
  1584                           ; Name         Instructions Cycles
  1585                           ; simple_byte           13     7 (average)
  1586                           ; direct_byte           35    11 (fixed)
  1587                           ; jumptable            263     9 (fixed)
  1588                           ;	Chosen strategy is simple_byte
  1589  07DE  0852               	movf	??_main,w
  1590  07DF  3A01               	xorlw	1	; case 1
  1591  07E0  1903               	skipnz
  1592  07E1  2CEF               	goto	l1561
  1593  07E2  3A03               	xorlw	3	; case 2
  1594  07E3  1903               	skipnz
  1595  07E4  2D4B               	goto	l1581
  1596  07E5  3A06               	xorlw	6	; case 4
  1597  07E6  1903               	skipnz
  1598  07E7  2DA0               	goto	l1601
  1599  07E8  3A0C               	xorlw	12	; case 8
  1600  07E9  1903               	skipnz
  1601  07EA  2EC3               	goto	l1643
  1602  07EB  2FCA               	goto	l1551
  1603  07EC  2FCA               	goto	l1551
  1604  07ED                     __end_of_main:	
  1605                           ;main.c: 237: }
  1606                           ;main.c: 238: return;
  1607                           
  1608                           
  1609                           	psect	text1
  1610  0450                     __ptext1:	
  1611 ;; *************** function _power *****************
  1612 ;; Defined at:
  1613 ;;		line 241 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;  x               4    0[BANK0 ] unsigned long 
  1616 ;;  n               2    4[BANK0 ] unsigned int 
  1617 ;; Auto vars:     Size  Location     Type
  1618 ;;  a               4    6[BANK0 ] unsigned long 
  1619 ;; Return value:  Size  Location     Type
  1620 ;;                  4    0[BANK0 ] unsigned long 
  1621 ;; Registers used:
  1622 ;;		wreg, status,2, status,0, pclath, cstack
  1623 ;; Tracked objects:
  1624 ;;		On entry : 0/0
  1625 ;;		On exit  : 0/0
  1626 ;;		Unchanged: 0/0
  1627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1628 ;;      Params:         0       6       0       0       0
  1629 ;;      Locals:         0       4       0       0       0
  1630 ;;      Temps:          0       0       0       0       0
  1631 ;;      Totals:         0      10       0       0       0
  1632 ;;Total ram usage:       10 bytes
  1633 ;; Hardware stack levels used:    1
  1634 ;; Hardware stack levels required when called:    1
  1635 ;; This function calls:
  1636 ;;		___lmul
  1637 ;; This function is called by:
  1638 ;;		_main
  1639 ;; This function uses a non-reentrant model
  1640 ;;
  1641                           
  1642                           
  1643                           ;psect for function _power
  1644  0450                     _power:	
  1645                           
  1646                           ;main.c: 243: unsigned long int a = 1;
  1647                           
  1648                           ;incstack = 0
  1649                           ; Regs used in _power: [wreg+status,2+status,0+pclath+cstack]
  1650  0450  3000               	movlw	0
  1651  0451  1283               	bcf	3,5	;RP0=0, select bank0
  1652  0452  1303               	bcf	3,6	;RP1=0, select bank0
  1653  0453  00D1               	movwf	power@a+3
  1654  0454  3000               	movlw	0
  1655  0455  00D0               	movwf	power@a+2
  1656  0456  3000               	movlw	0
  1657  0457  00CF               	movwf	power@a+1
  1658  0458  3001               	movlw	1
  1659  0459  00CE               	movwf	power@a
  1660  045A                     l1511:	
  1661                           ;main.c: 244: while(n)
  1662                           
  1663  045A  084D               	movf	power@n+1,w
  1664  045B  044C               	iorwf	power@n,w
  1665  045C  1903               	btfsc	3,2
  1666  045D  2CAD               	goto	l1513
  1667                           
  1668                           ;main.c: 245: {
  1669                           ;main.c: 246: if(n % 2)
  1670  045E  1C4C               	btfss	power@n,0
  1671  045F  2C86               	goto	l1507
  1672                           
  1673                           ;main.c: 247: {
  1674                           ;main.c: 248: a *= x;
  1675  0460  084B               	movf	power@x+3,w
  1676  0461  00F3               	movwf	___lmul@multiplier+3
  1677  0462  084A               	movf	power@x+2,w
  1678  0463  00F2               	movwf	___lmul@multiplier+2
  1679  0464  0849               	movf	power@x+1,w
  1680  0465  00F1               	movwf	___lmul@multiplier+1
  1681  0466  0848               	movf	power@x,w
  1682  0467  00F0               	movwf	___lmul@multiplier
  1683  0468  0851               	movf	power@a+3,w
  1684  0469  00F7               	movwf	___lmul@multiplicand+3
  1685  046A  0850               	movf	power@a+2,w
  1686  046B  00F6               	movwf	___lmul@multiplicand+2
  1687  046C  084F               	movf	power@a+1,w
  1688  046D  00F5               	movwf	___lmul@multiplicand+1
  1689  046E  084E               	movf	power@a,w
  1690  046F  00F4               	movwf	___lmul@multiplicand
  1691  0470  120A  118A  22DA   	fcall	___lmul
      +       120A  118A         
  1692  0475  0873               	movf	?___lmul+3,w
  1693  0476  1283               	bcf	3,5	;RP0=0, select bank0
  1694  0477  1303               	bcf	3,6	;RP1=0, select bank0
  1695  0478  00D1               	movwf	power@a+3
  1696  0479  0872               	movf	?___lmul+2,w
  1697  047A  00D0               	movwf	power@a+2
  1698  047B  0871               	movf	?___lmul+1,w
  1699  047C  00CF               	movwf	power@a+1
  1700  047D  0870               	movf	?___lmul,w
  1701  047E  00CE               	movwf	power@a
  1702                           
  1703                           ;main.c: 249: n--;
  1704  047F  3001               	movlw	1
  1705  0480  02CC               	subwf	power@n,f
  1706  0481  3000               	movlw	0
  1707  0482  1C03               	skipc
  1708  0483  03CD               	decf	power@n+1,f
  1709  0484  02CD               	subwf	power@n+1,f
  1710                           
  1711                           ;main.c: 250: }
  1712  0485  2C5A               	goto	l1511
  1713  0486                     l1507:	
  1714                           
  1715                           ;main.c: 251: else
  1716                           ;main.c: 252: {
  1717                           ;main.c: 253: x *= x;
  1718  0486  084B               	movf	power@x+3,w
  1719  0487  00F3               	movwf	___lmul@multiplier+3
  1720  0488  084A               	movf	power@x+2,w
  1721  0489  00F2               	movwf	___lmul@multiplier+2
  1722  048A  0849               	movf	power@x+1,w
  1723  048B  00F1               	movwf	___lmul@multiplier+1
  1724  048C  0848               	movf	power@x,w
  1725  048D  00F0               	movwf	___lmul@multiplier
  1726  048E  084B               	movf	power@x+3,w
  1727  048F  00F7               	movwf	___lmul@multiplicand+3
  1728  0490  084A               	movf	power@x+2,w
  1729  0491  00F6               	movwf	___lmul@multiplicand+2
  1730  0492  0849               	movf	power@x+1,w
  1731  0493  00F5               	movwf	___lmul@multiplicand+1
  1732  0494  0848               	movf	power@x,w
  1733  0495  00F4               	movwf	___lmul@multiplicand
  1734  0496  120A  118A  22DA   	fcall	___lmul
      +       120A  118A         
  1735  049B  0873               	movf	?___lmul+3,w
  1736  049C  1283               	bcf	3,5	;RP0=0, select bank0
  1737  049D  1303               	bcf	3,6	;RP1=0, select bank0
  1738  049E  00CB               	movwf	power@x+3
  1739  049F  0872               	movf	?___lmul+2,w
  1740  04A0  00CA               	movwf	power@x+2
  1741  04A1  0871               	movf	?___lmul+1,w
  1742  04A2  00C9               	movwf	power@x+1
  1743  04A3  0870               	movf	?___lmul,w
  1744  04A4  00C8               	movwf	power@x
  1745                           
  1746                           ;main.c: 254: n /= 2;
  1747  04A5  3001               	movlw	1
  1748  04A6                     u835:	
  1749  04A6  1003               	clrc
  1750  04A7  0CCD               	rrf	power@n+1,f
  1751  04A8  0CCC               	rrf	power@n,f
  1752  04A9  3EFF               	addlw	-1
  1753  04AA  1D03               	skipz
  1754  04AB  2CA6               	goto	u835
  1755  04AC  2C5A               	goto	l1511
  1756  04AD                     l1513:	
  1757                           
  1758                           ;main.c: 255: }
  1759                           ;main.c: 256: }
  1760                           ;main.c: 257: return a;
  1761  04AD  0851               	movf	power@a+3,w
  1762  04AE  00CB               	movwf	?_power+3
  1763  04AF  0850               	movf	power@a+2,w
  1764  04B0  00CA               	movwf	?_power+2
  1765  04B1  084F               	movf	power@a+1,w
  1766  04B2  00C9               	movwf	?_power+1
  1767  04B3  084E               	movf	power@a,w
  1768  04B4  00C8               	movwf	?_power
  1769  04B5  0008               	return
  1770  04B6                     __end_of_power:	
  1771                           
  1772                           	psect	text2
  1773  02DA                     __ptext2:	
  1774 ;; *************** function ___lmul *****************
  1775 ;; Defined at:
  1776 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.31\sources\common\lmul.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;  multiplier      4    0[COMMON] unsigned long 
  1779 ;;  multiplicand    4    4[COMMON] unsigned long 
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;  product         4    9[COMMON] unsigned long 
  1782 ;; Return value:  Size  Location     Type
  1783 ;;                  4    0[COMMON] unsigned long 
  1784 ;; Registers used:
  1785 ;;		wreg, status,2, status,0
  1786 ;; Tracked objects:
  1787 ;;		On entry : 0/0
  1788 ;;		On exit  : 0/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1791 ;;      Params:         8       0       0       0       0
  1792 ;;      Locals:         4       0       0       0       0
  1793 ;;      Temps:          1       0       0       0       0
  1794 ;;      Totals:        13       0       0       0       0
  1795 ;;Total ram usage:       13 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; This function calls:
  1798 ;;		Nothing
  1799 ;; This function is called by:
  1800 ;;		_main
  1801 ;;		_power
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           
  1806                           ;psect for function ___lmul
  1807  02DA                     ___lmul:	
  1808                           
  1809                           ;incstack = 0
  1810                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1811  02DA  3000               	movlw	0
  1812  02DB  00FC               	movwf	___lmul@product+3
  1813  02DC  3000               	movlw	0
  1814  02DD  00FB               	movwf	___lmul@product+2
  1815  02DE  3000               	movlw	0
  1816  02DF  00FA               	movwf	___lmul@product+1
  1817  02E0  3000               	movlw	0
  1818  02E1  00F9               	movwf	___lmul@product
  1819  02E2                     l1431:	
  1820  02E2  1C70               	btfss	___lmul@multiplier,0
  1821  02E3  2AF8               	goto	l1435
  1822  02E4  0874               	movf	___lmul@multiplicand,w
  1823  02E5  07F9               	addwf	___lmul@product,f
  1824  02E6  0875               	movf	___lmul@multiplicand+1,w
  1825  02E7  1103               	clrz
  1826  02E8  1803               	skipnc
  1827  02E9  3E01               	addlw	1
  1828  02EA  1D03               	btfss	3,2
  1829  02EB  07FA               	addwf	___lmul@product+1,f
  1830  02EC  0876               	movf	___lmul@multiplicand+2,w
  1831  02ED  1103               	clrz
  1832  02EE  1803               	skipnc
  1833  02EF  3E01               	addlw	1
  1834  02F0  1D03               	btfss	3,2
  1835  02F1  07FB               	addwf	___lmul@product+2,f
  1836  02F2  0877               	movf	___lmul@multiplicand+3,w
  1837  02F3  1103               	clrz
  1838  02F4  1803               	skipnc
  1839  02F5  3E01               	addlw	1
  1840  02F6  1D03               	btfss	3,2
  1841  02F7  07FC               	addwf	___lmul@product+3,f
  1842  02F8                     l1435:	
  1843  02F8  3001               	movlw	1
  1844  02F9  00F8               	movwf	??___lmul
  1845  02FA                     u765:	
  1846  02FA  1003               	clrc
  1847  02FB  0DF4               	rlf	___lmul@multiplicand,f
  1848  02FC  0DF5               	rlf	___lmul@multiplicand+1,f
  1849  02FD  0DF6               	rlf	___lmul@multiplicand+2,f
  1850  02FE  0DF7               	rlf	___lmul@multiplicand+3,f
  1851  02FF  0BF8               	decfsz	??___lmul,f
  1852  0300  2AFA               	goto	u765
  1853  0301  3001               	movlw	1
  1854  0302                     u775:	
  1855  0302  1003               	clrc
  1856  0303  0CF3               	rrf	___lmul@multiplier+3,f
  1857  0304  0CF2               	rrf	___lmul@multiplier+2,f
  1858  0305  0CF1               	rrf	___lmul@multiplier+1,f
  1859  0306  0CF0               	rrf	___lmul@multiplier,f
  1860  0307  3EFF               	addlw	-1
  1861  0308  1D03               	skipz
  1862  0309  2B02               	goto	u775
  1863  030A  0873               	movf	___lmul@multiplier+3,w
  1864  030B  0472               	iorwf	___lmul@multiplier+2,w
  1865  030C  0471               	iorwf	___lmul@multiplier+1,w
  1866  030D  0470               	iorwf	___lmul@multiplier,w
  1867  030E  1D03               	skipz
  1868  030F  2AE2               	goto	l1431
  1869  0310  087C               	movf	___lmul@product+3,w
  1870  0311  00F3               	movwf	?___lmul+3
  1871  0312  087B               	movf	___lmul@product+2,w
  1872  0313  00F2               	movwf	?___lmul+2
  1873  0314  087A               	movf	___lmul@product+1,w
  1874  0315  00F1               	movwf	?___lmul+1
  1875  0316  0879               	movf	___lmul@product,w
  1876  0317  00F0               	movwf	?___lmul
  1877  0318  0008               	return
  1878  0319                     __end_of___lmul:	
  1879                           
  1880                           	psect	text3
  1881  00C7                     __ptext3:	
  1882 ;; *************** function _init_I2C *****************
  1883 ;; Defined at:
  1884 ;;		line 393 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;		None
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;		None
  1889 ;; Return value:  Size  Location     Type
  1890 ;;		None               void
  1891 ;; Registers used:
  1892 ;;		None
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1898 ;;      Params:         0       0       0       0       0
  1899 ;;      Locals:         0       0       0       0       0
  1900 ;;      Temps:          0       0       0       0       0
  1901 ;;      Totals:         0       0       0       0       0
  1902 ;;Total ram usage:        0 bytes
  1903 ;; Hardware stack levels used:    1
  1904 ;; This function calls:
  1905 ;;		Nothing
  1906 ;; This function is called by:
  1907 ;;		_main
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911                           
  1912                           ;psect for function _init_I2C
  1913  00C7                     _init_I2C:	
  1914                           
  1915                           ;main.c: 395: RC4=0;
  1916                           
  1917                           ;incstack = 0
  1918                           ; Regs used in _init_I2C: []
  1919  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1920  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  1921  00C9  1207               	bcf	7,4	;volatile
  1922                           
  1923                           ;main.c: 396: TRISC3=0;
  1924  00CA  1683               	bsf	3,5	;RP0=1, select bank1
  1925  00CB  1303               	bcf	3,6	;RP1=0, select bank1
  1926  00CC  1187               	bcf	7,3	;volatile
  1927                           
  1928                           ;main.c: 397: TRISC4=0;
  1929  00CD  1207               	bcf	7,4	;volatile
  1930  00CE  0008               	return
  1931  00CF                     __end_of_init_I2C:	
  1932                           
  1933                           	psect	text4
  1934  03F9                     __ptext4:	
  1935 ;; *************** function _Restart *****************
  1936 ;; Defined at:
  1937 ;;		line 260 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;		None
  1940 ;; Auto vars:     Size  Location     Type
  1941 ;;  i               2   12[COMMON] int 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;		None               void
  1944 ;; Registers used:
  1945 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1951 ;;      Params:         0       0       0       0       0
  1952 ;;      Locals:         2       0       0       0       0
  1953 ;;      Temps:          2       0       0       0       0
  1954 ;;      Totals:         4       0       0       0       0
  1955 ;;Total ram usage:        4 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; Hardware stack levels required when called:    5
  1958 ;; This function calls:
  1959 ;;		_Clr_LCD
  1960 ;; This function is called by:
  1961 ;;		_main
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           
  1966                           ;psect for function _Restart
  1967  03F9                     _Restart:	
  1968                           
  1969                           ;main.c: 262: Clr_LCD(0);
  1970                           
  1971                           ;incstack = 0
  1972                           ; Regs used in _Restart: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1973  03F9  3000               	movlw	0
  1974  03FA  120A  118A  216F   	fcall	_Clr_LCD
      +       120A  118A         
  1975                           
  1976                           ;main.c: 263: Clr_LCD(1);
  1977  03FF  3001               	movlw	1
  1978  0400  120A  118A  216F   	fcall	_Clr_LCD
      +       120A  118A         
  1979                           
  1980                           ;main.c: 265: step = 0;
  1981  0405  1283               	bcf	3,5	;RP0=0, select bank0
  1982  0406  1303               	bcf	3,6	;RP1=0, select bank0
  1983  0407  01B0               	clrf	_step
  1984  0408  01B1               	clrf	_step+1
  1985                           
  1986                           ;main.c: 266: cnt0 = 0;
  1987  0409  01A6               	clrf	_cnt0
  1988  040A  01A7               	clrf	_cnt0+1
  1989                           
  1990                           ;main.c: 267: cntA = 0;
  1991  040B  01A8               	clrf	_cntA
  1992  040C  01A9               	clrf	_cntA+1
  1993                           
  1994                           ;main.c: 268: str = 0;
  1995  040D  01B4               	clrf	_str
  1996  040E  01B5               	clrf	_str+1
  1997                           
  1998                           ;main.c: 269: stlb = 0;
  1999  040F  01B2               	clrf	_stlb
  2000  0410  01B3               	clrf	_stlb+1
  2001                           
  2002                           ;main.c: 270: int_res = 0;
  2003  0411  3000               	movlw	0
  2004  0412  00A3               	movwf	_int_res+3
  2005  0413  3000               	movlw	0
  2006  0414  00A2               	movwf	_int_res+2
  2007  0415  3000               	movlw	0
  2008  0416  00A1               	movwf	_int_res+1
  2009  0417  3000               	movlw	0
  2010  0418  00A0               	movwf	_int_res
  2011                           
  2012                           ;main.c: 271: deg = 0;
  2013  0419  01AA               	clrf	_deg
  2014  041A  01AB               	clrf	_deg+1
  2015                           
  2016                           ;main.c: 272: ind = 0;
  2017  041B  01AC               	clrf	_ind
  2018  041C  01AD               	clrf	_ind+1
  2019                           
  2020                           ;main.c: 273: ind2 = 0;
  2021  041D  01AE               	clrf	_ind2
  2022  041E  01AF               	clrf	_ind2+1
  2023                           
  2024                           ;main.c: 275: for (int i = 0; i < 16; i++)
  2025  041F  01FC               	clrf	Restart@i
  2026  0420  01FD               	clrf	Restart@i+1
  2027  0421                     L3:	
  2028  0421  087D               	movf	Restart@i+1,w
  2029  0422  3A80               	xorlw	128
  2030  0423  00FF               	movwf	127
  2031  0424  3080               	movlw	128
  2032  0425  027F               	subwf	127,w
  2033  0426  1D03               	skipz
  2034  0427  2C2A               	goto	u795
  2035  0428  3010               	movlw	16
  2036  0429  027C               	subwf	Restart@i,w
  2037  042A                     u795:	
  2038  042A  1803               	btfsc	3,0
  2039  042B  0008               	return
  2040                           
  2041                           ;main.c: 276: {
  2042                           ;main.c: 277: int_arr[i] = 0;
  2043  042C  087C               	movf	Restart@i,w
  2044  042D  00FA               	movwf	??_Restart
  2045  042E  3002               	movlw	2
  2046  042F                     u805:	
  2047  042F  1003               	clrc
  2048  0430  0DFA               	rlf	??_Restart,f
  2049  0431  3EFF               	addlw	-1
  2050  0432  1D03               	skipz
  2051  0433  2C2F               	goto	u805
  2052  0434  30A0               	movlw	_int_arr& (0+255)
  2053  0435  077A               	addwf	??_Restart,w
  2054  0436  00FB               	movwf	??_Restart+1
  2055  0437  087B               	movf	??_Restart+1,w
  2056  0438  0084               	movwf	4
  2057  0439  1383               	bcf	3,7	;select IRP bank0
  2058  043A  0180               	clrf	0
  2059  043B  0A84               	incf	4,f
  2060  043C  0180               	clrf	0
  2061  043D  0A84               	incf	4,f
  2062  043E  0180               	clrf	0
  2063  043F  0A84               	incf	4,f
  2064  0440  0180               	clrf	0
  2065                           
  2066                           ;main.c: 278: str_line0[i] = '\0';
  2067  0441  087C               	movf	Restart@i,w
  2068  0442  3E38               	addlw	_str_line0& (0+255)
  2069  0443  0084               	movwf	4
  2070  0444  0180               	clrf	0
  2071                           
  2072                           ;main.c: 279: str_line1[i] = '\0';
  2073  0445  087C               	movf	Restart@i,w
  2074  0446  3EE0               	addlw	_str_line1& (0+255)
  2075  0447  0084               	movwf	4
  2076  0448  0180               	clrf	0
  2077  0449  3001               	movlw	1
  2078  044A  07FC               	addwf	Restart@i,f
  2079  044B  1803               	skipnc
  2080  044C  0AFD               	incf	Restart@i+1,f
  2081  044D  3000               	movlw	0
  2082  044E  07FD               	addwf	Restart@i+1,f
  2083  044F  2C21               	goto	L3
  2084  0450                     __end_of_Restart:	
  2085                           
  2086                           	psect	text5
  2087  016F                     __ptext5:	
  2088 ;; *************** function _Clr_LCD *****************
  2089 ;; Defined at:
  2090 ;;		line 380 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  2091 ;; Parameters:    Size  Location     Type
  2092 ;;  str_            1    wreg     unsigned char 
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;  str_            1    9[COMMON] unsigned char 
  2095 ;; Return value:  Size  Location     Type
  2096 ;;		None               void
  2097 ;; Registers used:
  2098 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2104 ;;      Params:         0       0       0       0       0
  2105 ;;      Locals:         1       0       0       0       0
  2106 ;;      Temps:          0       0       0       0       0
  2107 ;;      Totals:         1       0       0       0       0
  2108 ;;Total ram usage:        1 bytes
  2109 ;; Hardware stack levels used:    1
  2110 ;; Hardware stack levels required when called:    4
  2111 ;; This function calls:
  2112 ;;		_Set_Coord_LCD
  2113 ;;		_Show_String_LCD
  2114 ;; This function is called by:
  2115 ;;		_main
  2116 ;;		_Restart
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120                           
  2121                           ;psect for function _Clr_LCD
  2122  016F                     _Clr_LCD:	
  2123                           
  2124                           ;incstack = 0
  2125                           ; Regs used in _Clr_LCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2126                           ;Clr_LCD@str_ stored from wreg
  2127  016F  00F9               	movwf	Clr_LCD@str_
  2128                           
  2129                           ;main.c: 382: Set_Coord_LCD(str_,0);
  2130  0170  01F7               	clrf	Set_Coord_LCD@j
  2131  0171  0879               	movf	Clr_LCD@str_,w
  2132  0172  120A  118A  2119   	fcall	_Set_Coord_LCD
      +       120A  118A         
  2133                           
  2134                           ;main.c: 383: Show_String_LCD(str_BLANK);
  2135  0177  3001               	movlw	low (_str_BLANK-__stringbase)
  2136  0178  00F7               	movwf	Show_String_LCD@mySTRING
  2137  0179  3080               	movlw	128
  2138  017A  00F8               	movwf	Show_String_LCD@mySTRING+1
  2139  017B  120A  118A  21D1   	fcall	_Show_String_LCD
      +       120A  118A         
  2140                           
  2141                           ;main.c: 384: Set_Coord_LCD(0,0);
  2142  0180  01F7               	clrf	Set_Coord_LCD@j
  2143  0181  3000               	movlw	0
  2144  0182  120A  118A  2119   	fcall	_Set_Coord_LCD
  2145  0185  0008               	return
  2146  0186                     __end_of_Clr_LCD:	
  2147                           
  2148                           	psect	text6
  2149  01D1                     __ptext6:	
  2150 ;; *************** function _Show_String_LCD *****************
  2151 ;; Defined at:
  2152 ;;		line 372 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;  mySTRING        2    7[COMMON] PTR const unsigned char 
  2155 ;;		 -> str_BLANK(17), str_line1(16), str_line0(16), 
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;		None
  2158 ;; Return value:  Size  Location     Type
  2159 ;;		None               void
  2160 ;; Registers used:
  2161 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2162 ;; Tracked objects:
  2163 ;;		On entry : 0/0
  2164 ;;		On exit  : 0/0
  2165 ;;		Unchanged: 0/0
  2166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2167 ;;      Params:         2       0       0       0       0
  2168 ;;      Locals:         0       0       0       0       0
  2169 ;;      Temps:          0       0       0       0       0
  2170 ;;      Totals:         2       0       0       0       0
  2171 ;;Total ram usage:        2 bytes
  2172 ;; Hardware stack levels used:    1
  2173 ;; Hardware stack levels required when called:    3
  2174 ;; This function calls:
  2175 ;;		_Send_Byte_LCD
  2176 ;; This function is called by:
  2177 ;;		_main
  2178 ;;		_Clr_LCD
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           
  2183                           ;psect for function _Show_String_LCD
  2184  01D1                     _Show_String_LCD:	
  2185  01D1                     l1349:	
  2186                           ;main.c: 374: while(*mySTRING)
  2187                           
  2188                           ;incstack = 0
  2189                           ; Regs used in _Show_String_LCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2190                           
  2191  01D1  0878               	movf	Show_String_LCD@mySTRING+1,w
  2192  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  2193  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  2194  01D4  00FF               	movwf	127
  2195  01D5  0877               	movf	Show_String_LCD@mySTRING,w
  2196  01D6  0084               	movwf	4
  2197  01D7  120A  118A  2003   	fcall	stringtab
      +       120A  118A         
  2198  01DC  3800               	iorlw	0
  2199  01DD  1903               	btfsc	3,2
  2200  01DE  0008               	return
  2201                           
  2202                           ;main.c: 375: {
  2203                           ;main.c: 376: Send_Byte_LCD(*(mySTRING++));
  2204  01DF  0878               	movf	Show_String_LCD@mySTRING+1,w
  2205  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  2206  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  2207  01E2  00FF               	movwf	127
  2208  01E3  0877               	movf	Show_String_LCD@mySTRING,w
  2209  01E4  0084               	movwf	4
  2210  01E5  120A  118A  2003   	fcall	stringtab
      +       120A  118A         
  2211  01EA  120A  118A  229C   	fcall	_Send_Byte_LCD
      +       120A  118A         
  2212  01EF  3001               	movlw	1
  2213  01F0  07F7               	addwf	Show_String_LCD@mySTRING,f
  2214  01F1  1803               	skipnc
  2215  01F2  0AF8               	incf	Show_String_LCD@mySTRING+1,f
  2216  01F3  29D1               	goto	l1349
  2217  01F4                     __end_of_Show_String_LCD:	
  2218                           
  2219                           	psect	text7
  2220  029C                     __ptext7:	
  2221 ;; *************** function _Send_Byte_LCD *****************
  2222 ;; Defined at:
  2223 ;;		line 347 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;  tmp             1    wreg     unsigned char 
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;  tmp             1    6[COMMON] unsigned char 
  2228 ;; Return value:  Size  Location     Type
  2229 ;;		None               void
  2230 ;; Registers used:
  2231 ;;		wreg, status,2, status,0, pclath, cstack
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2237 ;;      Params:         0       0       0       0       0
  2238 ;;      Locals:         1       0       0       0       0
  2239 ;;      Temps:          2       0       0       0       0
  2240 ;;      Totals:         3       0       0       0       0
  2241 ;;Total ram usage:        3 bytes
  2242 ;; Hardware stack levels used:    1
  2243 ;; Hardware stack levels required when called:    2
  2244 ;; This function calls:
  2245 ;;		_Check_buttons
  2246 ;;		_Delay
  2247 ;;		_Pulse
  2248 ;; This function is called by:
  2249 ;;		_Show_String_LCD
  2250 ;; This function uses a non-reentrant model
  2251 ;;
  2252                           
  2253                           
  2254                           ;psect for function _Send_Byte_LCD
  2255  029C                     _Send_Byte_LCD:	
  2256                           
  2257                           ;incstack = 0
  2258                           ; Regs used in _Send_Byte_LCD: [wreg+status,2+status,0+pclath+cstack]
  2259                           ;Send_Byte_LCD@tmp stored from wreg
  2260  029C  00F6               	movwf	Send_Byte_LCD@tmp
  2261  029D                     l183:	
  2262                           ;main.c: 349: while (Check_buttons())
  2263                           
  2264  029D  120A  118A  221D   	fcall	_Check_buttons
      +       120A  118A         
  2265  02A2  3800               	iorlw	0
  2266  02A3  1903               	btfsc	3,2
  2267  02A4  2AAF               	goto	l1317
  2268                           
  2269                           ;main.c: 350: {
  2270                           ;main.c: 351: Delay(500*20);
  2271  02A5  3010               	movlw	16
  2272  02A6  00F0               	movwf	Delay@tmp
  2273  02A7  3027               	movlw	39
  2274  02A8  00F1               	movwf	Delay@tmp+1
  2275  02A9  120A  118A  210A   	fcall	_Delay
      +       120A  118A         
  2276  02AE  2A9D               	goto	l183
  2277  02AF                     l1317:	
  2278                           
  2279                           ;main.c: 352: }
  2280                           ;main.c: 353: PORTB = (PORTB & 0x0F) + (tmp & 0xF0);
  2281  02AF  300F               	movlw	15
  2282  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  2283  02B1  1303               	bcf	3,6	;RP1=0, select bank0
  2284  02B2  0506               	andwf	6,w	;volatile
  2285  02B3  00F4               	movwf	??_Send_Byte_LCD
  2286  02B4  0876               	movf	Send_Byte_LCD@tmp,w
  2287  02B5  39F0               	andlw	240
  2288  02B6  0774               	addwf	??_Send_Byte_LCD,w
  2289  02B7  0086               	movwf	6	;volatile
  2290                           
  2291                           ;main.c: 354: Pulse(2*20);
  2292  02B8  3028               	movlw	40
  2293  02B9  00F2               	movwf	Pulse@x
  2294  02BA  3000               	movlw	0
  2295  02BB  00F3               	movwf	Pulse@x+1
  2296  02BC  120A  118A  21B6   	fcall	_Pulse
      +       120A  118A         
  2297                           
  2298                           ;main.c: 355: PORTB = (PORTB & 0x0F) + (tmp << 4);
  2299  02C1  300F               	movlw	15
  2300  02C2  1283               	bcf	3,5	;RP0=0, select bank0
  2301  02C3  1303               	bcf	3,6	;RP1=0, select bank0
  2302  02C4  0506               	andwf	6,w	;volatile
  2303  02C5  00F4               	movwf	??_Send_Byte_LCD
  2304  02C6  0876               	movf	Send_Byte_LCD@tmp,w
  2305  02C7  00F5               	movwf	??_Send_Byte_LCD+1
  2306  02C8  3003               	movlw	3
  2307  02C9                     u635:	
  2308  02C9  1003               	clrc
  2309  02CA  0DF5               	rlf	??_Send_Byte_LCD+1,f
  2310  02CB  3EFF               	addlw	-1
  2311  02CC  1D03               	skipz
  2312  02CD  2AC9               	goto	u635
  2313  02CE  1003               	clrc
  2314  02CF  0D75               	rlf	??_Send_Byte_LCD+1,w
  2315  02D0  0774               	addwf	??_Send_Byte_LCD,w
  2316  02D1  0086               	movwf	6	;volatile
  2317                           
  2318                           ;main.c: 356: Pulse(2*20);
  2319  02D2  3028               	movlw	40
  2320  02D3  00F2               	movwf	Pulse@x
  2321  02D4  3000               	movlw	0
  2322  02D5  00F3               	movwf	Pulse@x+1
  2323  02D6  120A  118A  21B6   	fcall	_Pulse
  2324  02D9  0008               	return
  2325  02DA                     __end_of_Send_Byte_LCD:	
  2326                           
  2327                           	psect	text8
  2328  0119                     __ptext8:	
  2329 ;; *************** function _Set_Coord_LCD *****************
  2330 ;; Defined at:
  2331 ;;		line 359 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  2332 ;; Parameters:    Size  Location     Type
  2333 ;;  i               1    wreg     unsigned char 
  2334 ;;  j               1    7[COMMON] unsigned char 
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;  i               1    8[COMMON] unsigned char 
  2337 ;; Return value:  Size  Location     Type
  2338 ;;		None               void
  2339 ;; Registers used:
  2340 ;;		wreg, status,2, status,0, pclath, cstack
  2341 ;; Tracked objects:
  2342 ;;		On entry : 0/0
  2343 ;;		On exit  : 0/0
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2346 ;;      Params:         1       0       0       0       0
  2347 ;;      Locals:         1       0       0       0       0
  2348 ;;      Temps:          0       0       0       0       0
  2349 ;;      Totals:         2       0       0       0       0
  2350 ;;Total ram usage:        2 bytes
  2351 ;; Hardware stack levels used:    1
  2352 ;; Hardware stack levels required when called:    3
  2353 ;; This function calls:
  2354 ;;		_Send_Command_LCD
  2355 ;; This function is called by:
  2356 ;;		_main
  2357 ;;		_Clr_LCD
  2358 ;; This function uses a non-reentrant model
  2359 ;;
  2360                           
  2361                           
  2362                           ;psect for function _Set_Coord_LCD
  2363  0119                     _Set_Coord_LCD:	
  2364                           
  2365                           ;incstack = 0
  2366                           ; Regs used in _Set_Coord_LCD: [wreg+status,2+status,0+pclath+cstack]
  2367                           ;Set_Coord_LCD@i stored from wreg
  2368  0119  00F8               	movwf	Set_Coord_LCD@i
  2369                           
  2370                           ;main.c: 361: if(i==0)
  2371  011A  08F8               	movf	Set_Coord_LCD@i,f
  2372  011B  1D03               	skipz
  2373  011C  2923               	goto	l1355
  2374                           
  2375                           ;main.c: 362: {
  2376                           ;main.c: 363: Send_Command_LCD(0x80+j);
  2377  011D  0877               	movf	Set_Coord_LCD@j,w
  2378  011E  3E80               	addlw	128
  2379  011F  120A  118A  235F   	fcall	_Send_Command_LCD
  2380                           
  2381                           ;main.c: 364: }
  2382  0122  0008               	return
  2383  0123                     l1355:	
  2384                           
  2385                           ;main.c: 365: else
  2386                           ;main.c: 366: {
  2387                           ;main.c: 367: Send_Command_LCD(0xC0+j);
  2388  0123  0877               	movf	Set_Coord_LCD@j,w
  2389  0124  3EC0               	addlw	192
  2390  0125  120A  118A  235F   	fcall	_Send_Command_LCD
  2391  0128  0008               	return
  2392  0129                     __end_of_Set_Coord_LCD:	
  2393                           ;main.c: 368: }
  2394                           ;main.c: 369: return;
  2395                           
  2396                           
  2397                           	psect	text9
  2398  0247                     __ptext9:	
  2399 ;; *************** function _OUT_BYTE_PAGE_I2C *****************
  2400 ;; Defined at:
  2401 ;;		line 509 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;  tmp             1    wreg     unsigned char 
  2404 ;; Auto vars:     Size  Location     Type
  2405 ;;  tmp             1   10[COMMON] unsigned char 
  2406 ;; Return value:  Size  Location     Type
  2407 ;;		None               void
  2408 ;; Registers used:
  2409 ;;		wreg, status,2, status,0, pclath, cstack
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2415 ;;      Params:         0       0       0       0       0
  2416 ;;      Locals:         1       0       0       0       0
  2417 ;;      Temps:          2       0       0       0       0
  2418 ;;      Totals:         3       0       0       0       0
  2419 ;;Total ram usage:        3 bytes
  2420 ;; Hardware stack levels used:    1
  2421 ;; Hardware stack levels required when called:    5
  2422 ;; This function calls:
  2423 ;;		_Init_WRITE_I2C
  2424 ;;		_OUT_BYTE_I2C
  2425 ;;		_STOP_I2C
  2426 ;; This function is called by:
  2427 ;;		_main
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431                           
  2432                           ;psect for function _OUT_BYTE_PAGE_I2C
  2433  0247                     _OUT_BYTE_PAGE_I2C:	
  2434                           
  2435                           ;incstack = 0
  2436                           ; Regs used in _OUT_BYTE_PAGE_I2C: [wreg+status,2+status,0+pclath+cstack]
  2437                           ;OUT_BYTE_PAGE_I2C@tmp stored from wreg
  2438  0247  00FA               	movwf	OUT_BYTE_PAGE_I2C@tmp
  2439                           
  2440                           ;main.c: 511: OUT_BYTE_I2C(tmp);
  2441  0248  087A               	movf	OUT_BYTE_PAGE_I2C@tmp,w
  2442  0249  120A  118A  2271   	fcall	_OUT_BYTE_I2C
      +       120A  118A         
  2443                           
  2444                           ;main.c: 512: Adr_I2C++;
  2445  024E  3001               	movlw	1
  2446  024F  1283               	bcf	3,5	;RP0=0, select bank0
  2447  0250  1303               	bcf	3,6	;RP1=0, select bank0
  2448  0251  07A4               	addwf	_Adr_I2C,f
  2449  0252  1803               	skipnc
  2450  0253  0AA5               	incf	_Adr_I2C+1,f
  2451  0254  3000               	movlw	0
  2452  0255  07A5               	addwf	_Adr_I2C+1,f
  2453                           
  2454                           ;main.c: 513: if((0x40-1) & Adr_I2C)
  2455  0256  303F               	movlw	63
  2456  0257  0524               	andwf	_Adr_I2C,w
  2457  0258  00F8               	movwf	??_OUT_BYTE_PAGE_I2C
  2458  0259  3000               	movlw	0
  2459  025A  0525               	andwf	_Adr_I2C+1,w
  2460  025B  00F9               	movwf	??_OUT_BYTE_PAGE_I2C+1
  2461  025C  0879               	movf	??_OUT_BYTE_PAGE_I2C+1,w
  2462  025D  0478               	iorwf	??_OUT_BYTE_PAGE_I2C,w
  2463  025E  1D03               	btfss	3,2
  2464  025F  0008               	return
  2465                           
  2466                           ;main.c: 516: }
  2467                           ;main.c: 517: STOP_I2C();
  2468                           
  2469                           ;main.c: 514: {
  2470                           ;main.c: 515: return;
  2471  0260  120A  118A  2186   	fcall	_STOP_I2C
      +       120A  118A         
  2472                           
  2473                           ;main.c: 518: Init_WRITE_I2C(Adr_I2C);
  2474  0265  1283               	bcf	3,5	;RP0=0, select bank0
  2475  0266  1303               	bcf	3,6	;RP1=0, select bank0
  2476  0267  0825               	movf	_Adr_I2C+1,w
  2477  0268  01F6               	clrf	Init_WRITE_I2C@Adr_begin+1
  2478  0269  07F6               	addwf	Init_WRITE_I2C@Adr_begin+1,f
  2479  026A  0824               	movf	_Adr_I2C,w
  2480  026B  01F5               	clrf	Init_WRITE_I2C@Adr_begin
  2481  026C  07F5               	addwf	Init_WRITE_I2C@Adr_begin,f
  2482  026D  120A  118A  2319   	fcall	_Init_WRITE_I2C
  2483  0270  0008               	return
  2484  0271                     __end_of_OUT_BYTE_PAGE_I2C:	
  2485                           ;main.c: 519: return;
  2486                           
  2487                           
  2488                           	psect	text10
  2489  019E                     __ptext10:	
  2490 ;; *************** function _Init_READ_I2C *****************
  2491 ;; Defined at:
  2492 ;;		line 426 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  2493 ;; Parameters:    Size  Location     Type
  2494 ;;  Adr_begin       2    8[COMMON] unsigned int 
  2495 ;; Auto vars:     Size  Location     Type
  2496 ;;		None
  2497 ;; Return value:  Size  Location     Type
  2498 ;;		None               void
  2499 ;; Registers used:
  2500 ;;		wreg, status,2, status,0, pclath, cstack
  2501 ;; Tracked objects:
  2502 ;;		On entry : 0/0
  2503 ;;		On exit  : 0/0
  2504 ;;		Unchanged: 0/0
  2505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2506 ;;      Params:         2       0       0       0       0
  2507 ;;      Locals:         0       0       0       0       0
  2508 ;;      Temps:          0       0       0       0       0
  2509 ;;      Totals:         2       0       0       0       0
  2510 ;;Total ram usage:        2 bytes
  2511 ;; Hardware stack levels used:    1
  2512 ;; Hardware stack levels required when called:    5
  2513 ;; This function calls:
  2514 ;;		_Init_WRITE_I2C
  2515 ;;		_OUT_BYTE_I2C
  2516 ;;		_START_I2C
  2517 ;; This function is called by:
  2518 ;;		_main
  2519 ;; This function uses a non-reentrant model
  2520 ;;
  2521                           
  2522                           
  2523                           ;psect for function _Init_READ_I2C
  2524  019E                     _Init_READ_I2C:	
  2525                           
  2526                           ;main.c: 428: Init_WRITE_I2C(Adr_begin);
  2527                           
  2528                           ;incstack = 0
  2529                           ; Regs used in _Init_READ_I2C: [wreg+status,2+status,0+pclath+cstack]
  2530  019E  0879               	movf	Init_READ_I2C@Adr_begin+1,w
  2531  019F  01F6               	clrf	Init_WRITE_I2C@Adr_begin+1
  2532  01A0  07F6               	addwf	Init_WRITE_I2C@Adr_begin+1,f
  2533  01A1  0878               	movf	Init_READ_I2C@Adr_begin,w
  2534  01A2  01F5               	clrf	Init_WRITE_I2C@Adr_begin
  2535  01A3  07F5               	addwf	Init_WRITE_I2C@Adr_begin,f
  2536  01A4  120A  118A  2319   	fcall	_Init_WRITE_I2C
      +       120A  118A         
  2537                           
  2538                           ;main.c: 429: START_I2C ();
  2539  01A9  120A  118A  215C   	fcall	_START_I2C
      +       120A  118A         
  2540                           
  2541                           ;main.c: 430: Slave_ADR_RW_I2C|=1;
  2542  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  2543  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  2544  01B0  1437               	bsf	_Slave_ADR_RW_I2C,0
  2545                           
  2546                           ;main.c: 431: OUT_BYTE_I2C(Slave_ADR_RW_I2C);
  2547  01B1  0837               	movf	_Slave_ADR_RW_I2C,w
  2548  01B2  120A  118A  2271   	fcall	_OUT_BYTE_I2C
  2549  01B5  0008               	return
  2550  01B6                     __end_of_Init_READ_I2C:	
  2551                           
  2552                           	psect	text11
  2553  0319                     __ptext11:	
  2554 ;; *************** function _Init_WRITE_I2C *****************
  2555 ;; Defined at:
  2556 ;;		line 400 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;  Adr_begin       2    5[COMMON] unsigned int 
  2559 ;; Auto vars:     Size  Location     Type
  2560 ;;		None
  2561 ;; Return value:  Size  Location     Type
  2562 ;;		None               void
  2563 ;; Registers used:
  2564 ;;		wreg, status,2, status,0, pclath, cstack
  2565 ;; Tracked objects:
  2566 ;;		On entry : 0/0
  2567 ;;		On exit  : 0/0
  2568 ;;		Unchanged: 0/0
  2569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2570 ;;      Params:         2       0       0       0       0
  2571 ;;      Locals:         0       0       0       0       0
  2572 ;;      Temps:          1       0       0       0       0
  2573 ;;      Totals:         3       0       0       0       0
  2574 ;;Total ram usage:        3 bytes
  2575 ;; Hardware stack levels used:    1
  2576 ;; Hardware stack levels required when called:    4
  2577 ;; This function calls:
  2578 ;;		_OUT_BYTE_I2C
  2579 ;;		_START_I2C
  2580 ;;		_STOP_I2C
  2581 ;; This function is called by:
  2582 ;;		_main
  2583 ;;		_Init_READ_I2C
  2584 ;;		_OUT_BYTE_PAGE_I2C
  2585 ;; This function uses a non-reentrant model
  2586 ;;
  2587                           
  2588                           
  2589                           ;psect for function _Init_WRITE_I2C
  2590  0319                     _Init_WRITE_I2C:	
  2591                           
  2592                           ;main.c: 402: Adr_I2C = Adr_begin;
  2593                           
  2594                           ;incstack = 0
  2595                           ; Regs used in _Init_WRITE_I2C: [wreg+status,2+status,0+pclath+cstack]
  2596  0319  0876               	movf	Init_WRITE_I2C@Adr_begin+1,w
  2597  031A  1283               	bcf	3,5	;RP0=0, select bank0
  2598  031B  1303               	bcf	3,6	;RP1=0, select bank0
  2599  031C  01A5               	clrf	_Adr_I2C+1
  2600  031D  07A5               	addwf	_Adr_I2C+1,f
  2601  031E  0875               	movf	Init_WRITE_I2C@Adr_begin,w
  2602  031F  01A4               	clrf	_Adr_I2C
  2603  0320  07A4               	addwf	_Adr_I2C,f
  2604  0321                     l1383:	
  2605                           ;main.c: 403: rep:
  2606                           
  2607                           
  2608                           ;main.c: 404: START_I2C();
  2609  0321  120A  118A  215C   	fcall	_START_I2C
      +       120A  118A         
  2610                           
  2611                           ;main.c: 405: Slave_ADR_RW_I2C& = 0xFE;
  2612  0326  30FE               	movlw	254
  2613  0327  00F7               	movwf	??_Init_WRITE_I2C
  2614  0328  0877               	movf	??_Init_WRITE_I2C,w
  2615  0329  1283               	bcf	3,5	;RP0=0, select bank0
  2616  032A  1303               	bcf	3,6	;RP1=0, select bank0
  2617  032B  05B7               	andwf	_Slave_ADR_RW_I2C,f
  2618                           
  2619                           ;main.c: 406: OUT_BYTE_I2C(Slave_ADR_RW_I2C);
  2620  032C  0837               	movf	_Slave_ADR_RW_I2C,w
  2621  032D  120A  118A  2271   	fcall	_OUT_BYTE_I2C
      +       120A  118A         
  2622                           
  2623                           ;main.c: 407: if(Ch_ACK)
  2624  0332  1283               	bcf	3,5	;RP0=0, select bank0
  2625  0333  1303               	bcf	3,6	;RP1=0, select bank0
  2626  0334  0836               	movf	_Ch_ACK,w
  2627  0335  1903               	btfsc	3,2
  2628  0336  2B3D               	goto	l1391
  2629                           
  2630                           ;main.c: 408: {
  2631                           ;main.c: 409: STOP_I2C();
  2632  0337  120A  118A  2186   	fcall	_STOP_I2C
      +       120A  118A         
  2633                           
  2634                           ;main.c: 410: goto rep;
  2635  033C  2B21               	goto	l1383
  2636  033D                     l1391:	
  2637                           
  2638                           ;main.c: 411: }
  2639                           ;main.c: 412: OUT_BYTE_I2C(Adr_begin>>8);
  2640  033D  0876               	movf	Init_WRITE_I2C@Adr_begin+1,w
  2641  033E  120A  118A  2271   	fcall	_OUT_BYTE_I2C
      +       120A  118A         
  2642                           
  2643                           ;main.c: 413: if(Ch_ACK)
  2644  0343  1283               	bcf	3,5	;RP0=0, select bank0
  2645  0344  1303               	bcf	3,6	;RP1=0, select bank0
  2646  0345  0836               	movf	_Ch_ACK,w
  2647  0346  1903               	btfsc	3,2
  2648  0347  2B4E               	goto	l1397
  2649                           
  2650                           ;main.c: 414: {
  2651                           ;main.c: 415: STOP_I2C();
  2652  0348  120A  118A  2186   	fcall	_STOP_I2C
      +       120A  118A         
  2653                           
  2654                           ;main.c: 416: goto rep;
  2655  034D  2B21               	goto	l1383
  2656  034E                     l1397:	
  2657                           
  2658                           ;main.c: 417: }
  2659                           ;main.c: 418: OUT_BYTE_I2C(Adr_begin);
  2660  034E  0875               	movf	Init_WRITE_I2C@Adr_begin,w
  2661  034F  120A  118A  2271   	fcall	_OUT_BYTE_I2C
      +       120A  118A         
  2662                           
  2663                           ;main.c: 419: if(Ch_ACK)
  2664  0354  1283               	bcf	3,5	;RP0=0, select bank0
  2665  0355  1303               	bcf	3,6	;RP1=0, select bank0
  2666  0356  0836               	movf	_Ch_ACK,w
  2667  0357  1903               	btfsc	3,2
  2668  0358  0008               	return
  2669                           
  2670                           ;main.c: 420: {
  2671                           ;main.c: 421: STOP_I2C();
  2672  0359  120A  118A  2186   	fcall	_STOP_I2C
      +       120A  118A         
  2673                           
  2674                           ;main.c: 422: goto rep;
  2675  035E  2B21               	goto	l1383
  2676  035F                     __end_of_Init_WRITE_I2C:	
  2677                           
  2678                           	psect	text12
  2679  015C                     __ptext12:	
  2680 ;; *************** function _START_I2C *****************
  2681 ;; Defined at:
  2682 ;;		line 434 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;		None
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;		None
  2687 ;; Return value:  Size  Location     Type
  2688 ;;		None               void
  2689 ;; Registers used:
  2690 ;;		wreg, status,2, status,0, pclath, cstack
  2691 ;; Tracked objects:
  2692 ;;		On entry : 0/0
  2693 ;;		On exit  : 0/0
  2694 ;;		Unchanged: 0/0
  2695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2696 ;;      Params:         0       0       0       0       0
  2697 ;;      Locals:         0       0       0       0       0
  2698 ;;      Temps:          0       0       0       0       0
  2699 ;;      Totals:         0       0       0       0       0
  2700 ;;Total ram usage:        0 bytes
  2701 ;; Hardware stack levels used:    1
  2702 ;; Hardware stack levels required when called:    2
  2703 ;; This function calls:
  2704 ;;		_HIGH_SCL_I2C
  2705 ;;		_HIGH_SDA_I2C
  2706 ;;		_LOW_SCL_I2C
  2707 ;;		_LOW_SDA_I2C
  2708 ;; This function is called by:
  2709 ;;		_Init_WRITE_I2C
  2710 ;;		_Init_READ_I2C
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           
  2715                           ;psect for function _START_I2C
  2716  015C                     _START_I2C:	
  2717                           
  2718                           ;main.c: 436: HIGH_SDA_I2C();
  2719                           
  2720                           ;incstack = 0
  2721                           ; Regs used in _START_I2C: [wreg+status,2+status,0+pclath+cstack]
  2722  015C  120A  118A  20BF   	fcall	_HIGH_SDA_I2C
      +       120A  118A         
  2723                           
  2724                           ;main.c: 437: HIGH_SCL_I2C();
  2725  0161  120A  118A  20B7   	fcall	_HIGH_SCL_I2C
      +       120A  118A         
  2726                           
  2727                           ;main.c: 438: LOW_SDA_I2C();
  2728  0166  120A  118A  2129   	fcall	_LOW_SDA_I2C
      +       120A  118A         
  2729                           
  2730                           ;main.c: 439: LOW_SCL_I2C();
  2731  016B  120A  118A  20F2   	fcall	_LOW_SCL_I2C
  2732  016E  0008               	return
  2733  016F                     __end_of_START_I2C:	
  2734                           
  2735                           	psect	text13
  2736  0271                     __ptext13:	
  2737 ;; *************** function _OUT_BYTE_I2C *****************
  2738 ;; Defined at:
  2739 ;;		line 522 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  2740 ;; Parameters:    Size  Location     Type
  2741 ;;  t               1    wreg     unsigned char 
  2742 ;; Auto vars:     Size  Location     Type
  2743 ;;  t               1    4[COMMON] unsigned char 
  2744 ;;  tmp             1    3[COMMON] unsigned char 
  2745 ;; Return value:  Size  Location     Type
  2746 ;;		None               void
  2747 ;; Registers used:
  2748 ;;		wreg, status,2, status,0, pclath, cstack
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2754 ;;      Params:         0       0       0       0       0
  2755 ;;      Locals:         2       0       0       0       0
  2756 ;;      Temps:          1       0       0       0       0
  2757 ;;      Totals:         3       0       0       0       0
  2758 ;;Total ram usage:        3 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:    3
  2761 ;; This function calls:
  2762 ;;		_CLOCK_PULSE_I2C
  2763 ;;		_Check_ACK_I2C
  2764 ;;		_HIGH_SDA_I2C
  2765 ;;		_LOW_SDA_I2C
  2766 ;; This function is called by:
  2767 ;;		_Init_WRITE_I2C
  2768 ;;		_Init_READ_I2C
  2769 ;;		_OUT_BYTE_PAGE_I2C
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           
  2774                           ;psect for function _OUT_BYTE_I2C
  2775  0271                     _OUT_BYTE_I2C:	
  2776                           
  2777                           ;incstack = 0
  2778                           ; Regs used in _OUT_BYTE_I2C: [wreg+status,2+status,0+pclath+cstack]
  2779                           ;OUT_BYTE_I2C@t stored from wreg
  2780  0271  00F4               	movwf	OUT_BYTE_I2C@t
  2781                           
  2782                           ;main.c: 524: byte tmp;
  2783                           ;main.c: 525: tmp=8;
  2784  0272  3008               	movlw	8
  2785  0273  00F2               	movwf	??_OUT_BYTE_I2C
  2786  0274  0872               	movf	??_OUT_BYTE_I2C,w
  2787  0275  00F3               	movwf	OUT_BYTE_I2C@tmp
  2788  0276                     l1371:	
  2789                           ;main.c: 526: while(tmp--)
  2790                           
  2791  0276  3001               	movlw	1
  2792  0277  02F3               	subwf	OUT_BYTE_I2C@tmp,f
  2793  0278  0873               	movf	OUT_BYTE_I2C@tmp,w
  2794  0279  3AFF               	xorlw	255
  2795  027A  1903               	btfsc	3,2
  2796  027B  2A93               	goto	l1373
  2797                           
  2798                           ;main.c: 527: {
  2799                           ;main.c: 528: if(t & 0x80)
  2800  027C  1FF4               	btfss	OUT_BYTE_I2C@t,7
  2801  027D  2A84               	goto	l1367
  2802                           
  2803                           ;main.c: 529: {
  2804                           ;main.c: 530: HIGH_SDA_I2C();
  2805  027E  120A  118A  20BF   	fcall	_HIGH_SDA_I2C
      +       120A  118A         
  2806                           
  2807                           ;main.c: 531: }
  2808  0283  2A89               	goto	l257
  2809  0284                     l1367:	
  2810                           
  2811                           ;main.c: 532: else
  2812                           ;main.c: 533: {
  2813                           ;main.c: 534: LOW_SDA_I2C();
  2814  0284  120A  118A  2129   	fcall	_LOW_SDA_I2C
      +       120A  118A         
  2815  0289                     l257:	
  2816                           
  2817                           ;main.c: 535: }
  2818                           ;main.c: 536: CLOCK_PULSE_I2C();
  2819  0289  120A  118A  20D7   	fcall	_CLOCK_PULSE_I2C
      +       120A  118A         
  2820                           
  2821                           ;main.c: 537: t+=t;
  2822  028E  0874               	movf	OUT_BYTE_I2C@t,w
  2823  028F  00F2               	movwf	??_OUT_BYTE_I2C
  2824  0290  0872               	movf	??_OUT_BYTE_I2C,w
  2825  0291  07F4               	addwf	OUT_BYTE_I2C@t,f
  2826  0292  2A76               	goto	l1371
  2827  0293                     l1373:	
  2828                           
  2829                           ;main.c: 538: }
  2830                           ;main.c: 539: HIGH_SDA_I2C();
  2831  0293  120A  118A  20BF   	fcall	_HIGH_SDA_I2C
      +       120A  118A         
  2832                           
  2833                           ;main.c: 540: Check_ACK_I2C();
  2834  0298  120A  118A  214B   	fcall	_Check_ACK_I2C
  2835  029B  0008               	return
  2836  029C                     __end_of_OUT_BYTE_I2C:	
  2837                           
  2838                           	psect	text14
  2839  014B                     __ptext14:	
  2840 ;; *************** function _Check_ACK_I2C *****************
  2841 ;; Defined at:
  2842 ;;		line 558 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  2843 ;; Parameters:    Size  Location     Type
  2844 ;;		None
  2845 ;; Auto vars:     Size  Location     Type
  2846 ;;		None
  2847 ;; Return value:  Size  Location     Type
  2848 ;;		None               void
  2849 ;; Registers used:
  2850 ;;		wreg, status,2, status,0, pclath, cstack
  2851 ;; Tracked objects:
  2852 ;;		On entry : 0/0
  2853 ;;		On exit  : 0/0
  2854 ;;		Unchanged: 0/0
  2855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2856 ;;      Params:         0       0       0       0       0
  2857 ;;      Locals:         0       0       0       0       0
  2858 ;;      Temps:          0       0       0       0       0
  2859 ;;      Totals:         0       0       0       0       0
  2860 ;;Total ram usage:        0 bytes
  2861 ;; Hardware stack levels used:    1
  2862 ;; Hardware stack levels required when called:    2
  2863 ;; This function calls:
  2864 ;;		_HIGH_SCL_I2C
  2865 ;;		_LOW_SCL_I2C
  2866 ;; This function is called by:
  2867 ;;		_OUT_BYTE_I2C
  2868 ;; This function uses a non-reentrant model
  2869 ;;
  2870                           
  2871                           
  2872                           ;psect for function _Check_ACK_I2C
  2873  014B                     _Check_ACK_I2C:	
  2874                           
  2875                           ;main.c: 560: HIGH_SCL_I2C();
  2876                           
  2877                           ;incstack = 0
  2878                           ; Regs used in _Check_ACK_I2C: [wreg+status,2+status,0+pclath+cstack]
  2879  014B  120A  118A  20B7   	fcall	_HIGH_SCL_I2C
      +       120A  118A         
  2880                           
  2881                           ;main.c: 561: if(((PORTC) & (1 <<(4))))
  2882  0150  1283               	bcf	3,5	;RP0=0, select bank0
  2883  0151  1303               	bcf	3,6	;RP1=0, select bank0
  2884  0152  1E07               	btfss	7,4	;volatile
  2885  0153  2957               	goto	l1339
  2886                           
  2887                           ;main.c: 562: {
  2888                           ;main.c: 563: Ch_ACK=1;
  2889  0154  01B6               	clrf	_Ch_ACK
  2890  0155  0AB6               	incf	_Ch_ACK,f
  2891                           
  2892                           ;main.c: 564: }
  2893  0156  2958               	goto	l1341
  2894  0157                     l1339:	
  2895                           
  2896                           ;main.c: 565: else
  2897                           ;main.c: 566: {
  2898                           ;main.c: 567: Ch_ACK=0;
  2899  0157  01B6               	clrf	_Ch_ACK
  2900  0158                     l1341:	
  2901                           
  2902                           ;main.c: 568: }
  2903                           ;main.c: 569: LOW_SCL_I2C();
  2904  0158  120A  118A  20F2   	fcall	_LOW_SCL_I2C
  2905  015B  0008               	return
  2906  015C                     __end_of_Check_ACK_I2C:	
  2907                           
  2908                           	psect	text15
  2909  03AA                     __ptext15:	
  2910 ;; *************** function _Init_LCD *****************
  2911 ;; Defined at:
  2912 ;;		line 313 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;		None
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;		None
  2917 ;; Return value:  Size  Location     Type
  2918 ;;		None               void
  2919 ;; Registers used:
  2920 ;;		wreg, status,2, status,0, pclath, cstack
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2926 ;;      Params:         0       0       0       0       0
  2927 ;;      Locals:         0       0       0       0       0
  2928 ;;      Temps:          0       0       0       0       0
  2929 ;;      Totals:         0       0       0       0       0
  2930 ;;Total ram usage:        0 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:    3
  2933 ;; This function calls:
  2934 ;;		_Delay
  2935 ;;		_Pulse
  2936 ;;		_Send_Command_LCD
  2937 ;; This function is called by:
  2938 ;;		_main
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           
  2943                           ;psect for function _Init_LCD
  2944  03AA                     _Init_LCD:	
  2945                           
  2946                           ;main.c: 315: Delay(200*20);
  2947                           
  2948                           ;incstack = 0
  2949                           ; Regs used in _Init_LCD: [wreg+status,2+status,0+pclath+cstack]
  2950  03AA  30A0               	movlw	160
  2951  03AB  00F0               	movwf	Delay@tmp
  2952  03AC  300F               	movlw	15
  2953  03AD  00F1               	movwf	Delay@tmp+1
  2954  03AE  120A  118A  210A   	fcall	_Delay
      +       120A  118A         
  2955                           
  2956                           ;main.c: 317: TRISB=0;
  2957  03B3  1683               	bsf	3,5	;RP0=1, select bank1
  2958  03B4  1303               	bcf	3,6	;RP1=0, select bank1
  2959  03B5  0186               	clrf	6	;volatile
  2960                           
  2961                           ;main.c: 318: PORTB=0x30;
  2962  03B6  3030               	movlw	48
  2963  03B7  1283               	bcf	3,5	;RP0=0, select bank0
  2964  03B8  1303               	bcf	3,6	;RP1=0, select bank0
  2965  03B9  0086               	movwf	6	;volatile
  2966                           
  2967                           ;main.c: 319: Pulse(20*20);
  2968  03BA  3090               	movlw	144
  2969  03BB  00F2               	movwf	Pulse@x
  2970  03BC  3001               	movlw	1
  2971  03BD  00F3               	movwf	Pulse@x+1
  2972  03BE  120A  118A  21B6   	fcall	_Pulse
      +       120A  118A         
  2973                           
  2974                           ;main.c: 320: Pulse(20*20);
  2975  03C3  3090               	movlw	144
  2976  03C4  00F2               	movwf	Pulse@x
  2977  03C5  3001               	movlw	1
  2978  03C6  00F3               	movwf	Pulse@x+1
  2979  03C7  120A  118A  21B6   	fcall	_Pulse
      +       120A  118A         
  2980                           
  2981                           ;main.c: 321: Pulse(20*20);
  2982  03CC  3090               	movlw	144
  2983  03CD  00F2               	movwf	Pulse@x
  2984  03CE  3001               	movlw	1
  2985  03CF  00F3               	movwf	Pulse@x+1
  2986  03D0  120A  118A  21B6   	fcall	_Pulse
      +       120A  118A         
  2987                           
  2988                           ;main.c: 323: PORTB=0x20;
  2989  03D5  3020               	movlw	32
  2990  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  2991  03D7  1303               	bcf	3,6	;RP1=0, select bank0
  2992  03D8  0086               	movwf	6	;volatile
  2993                           
  2994                           ;main.c: 324: Pulse(20*20);
  2995  03D9  3090               	movlw	144
  2996  03DA  00F2               	movwf	Pulse@x
  2997  03DB  3001               	movlw	1
  2998  03DC  00F3               	movwf	Pulse@x+1
  2999  03DD  120A  118A  21B6   	fcall	_Pulse
      +       120A  118A         
  3000                           
  3001                           ;main.c: 326: Send_Command_LCD (0x28);
  3002  03E2  3028               	movlw	40
  3003  03E3  120A  118A  235F   	fcall	_Send_Command_LCD
      +       120A  118A         
  3004                           
  3005                           ;main.c: 327: Send_Command_LCD (0x0F);
  3006  03E8  300F               	movlw	15
  3007  03E9  120A  118A  235F   	fcall	_Send_Command_LCD
      +       120A  118A         
  3008                           
  3009                           ;main.c: 328: Send_Command_LCD (0x06);
  3010  03EE  3006               	movlw	6
  3011  03EF  120A  118A  235F   	fcall	_Send_Command_LCD
      +       120A  118A         
  3012                           
  3013                           ;main.c: 329: Send_Command_LCD (0x02);
  3014  03F4  3002               	movlw	2
  3015  03F5  120A  118A  235F   	fcall	_Send_Command_LCD
  3016  03F8  0008               	return
  3017  03F9                     __end_of_Init_LCD:	
  3018                           
  3019                           	psect	text16
  3020  035F                     __ptext16:	
  3021 ;; *************** function _Send_Command_LCD *****************
  3022 ;; Defined at:
  3023 ;;		line 332 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  3024 ;; Parameters:    Size  Location     Type
  3025 ;;  tmp             1    wreg     unsigned char 
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;  tmp             1    6[COMMON] unsigned char 
  3028 ;; Return value:  Size  Location     Type
  3029 ;;		None               void
  3030 ;; Registers used:
  3031 ;;		wreg, status,2, status,0, pclath, cstack
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3037 ;;      Params:         0       0       0       0       0
  3038 ;;      Locals:         1       0       0       0       0
  3039 ;;      Temps:          2       0       0       0       0
  3040 ;;      Totals:         3       0       0       0       0
  3041 ;;Total ram usage:        3 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    2
  3044 ;; This function calls:
  3045 ;;		_Check_buttons
  3046 ;;		_Delay
  3047 ;;		_Pulse
  3048 ;; This function is called by:
  3049 ;;		_Init_LCD
  3050 ;;		_Set_Coord_LCD
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           
  3055                           ;psect for function _Send_Command_LCD
  3056  035F                     _Send_Command_LCD:	
  3057                           
  3058                           ;incstack = 0
  3059                           ; Regs used in _Send_Command_LCD: [wreg+status,2+status,0+pclath+cstack]
  3060                           ;Send_Command_LCD@tmp stored from wreg
  3061  035F  00F6               	movwf	Send_Command_LCD@tmp
  3062  0360                     l177:	
  3063                           ;main.c: 334: while (Check_buttons())
  3064                           
  3065  0360  120A  118A  221D   	fcall	_Check_buttons
      +       120A  118A         
  3066  0365  3800               	iorlw	0
  3067  0366  1903               	btfsc	3,2
  3068  0367  2B72               	goto	l179
  3069                           
  3070                           ;main.c: 335: {
  3071                           ;main.c: 336: Delay(500*20);
  3072  0368  3010               	movlw	16
  3073  0369  00F0               	movwf	Delay@tmp
  3074  036A  3027               	movlw	39
  3075  036B  00F1               	movwf	Delay@tmp+1
  3076  036C  120A  118A  210A   	fcall	_Delay
      +       120A  118A         
  3077  0371  2B60               	goto	l177
  3078  0372                     l179:	
  3079                           
  3080                           ;main.c: 337: }
  3081                           ;main.c: 338: RB1 = 0;
  3082  0372  1283               	bcf	3,5	;RP0=0, select bank0
  3083  0373  1303               	bcf	3,6	;RP1=0, select bank0
  3084  0374  1086               	bcf	6,1	;volatile
  3085                           
  3086                           ;main.c: 339: PORTB=(PORTB & 0x0F) + (tmp & 0xF0);
  3087  0375  300F               	movlw	15
  3088  0376  0506               	andwf	6,w	;volatile
  3089  0377  00F4               	movwf	??_Send_Command_LCD
  3090  0378  0876               	movf	Send_Command_LCD@tmp,w
  3091  0379  39F0               	andlw	240
  3092  037A  0774               	addwf	??_Send_Command_LCD,w
  3093  037B  0086               	movwf	6	;volatile
  3094                           
  3095                           ;main.c: 340: Pulse(2 * 20);
  3096  037C  3028               	movlw	40
  3097  037D  00F2               	movwf	Pulse@x
  3098  037E  3000               	movlw	0
  3099  037F  00F3               	movwf	Pulse@x+1
  3100  0380  120A  118A  21B6   	fcall	_Pulse
      +       120A  118A         
  3101                           
  3102                           ;main.c: 341: PORTB=(PORTB & 0x0F) + (tmp << 4);
  3103  0385  300F               	movlw	15
  3104  0386  1283               	bcf	3,5	;RP0=0, select bank0
  3105  0387  1303               	bcf	3,6	;RP1=0, select bank0
  3106  0388  0506               	andwf	6,w	;volatile
  3107  0389  00F4               	movwf	??_Send_Command_LCD
  3108  038A  0876               	movf	Send_Command_LCD@tmp,w
  3109  038B  00F5               	movwf	??_Send_Command_LCD+1
  3110  038C  3003               	movlw	3
  3111  038D                     u615:	
  3112  038D  1003               	clrc
  3113  038E  0DF5               	rlf	??_Send_Command_LCD+1,f
  3114  038F  3EFF               	addlw	-1
  3115  0390  1D03               	skipz
  3116  0391  2B8D               	goto	u615
  3117  0392  1003               	clrc
  3118  0393  0D75               	rlf	??_Send_Command_LCD+1,w
  3119  0394  0774               	addwf	??_Send_Command_LCD,w
  3120  0395  0086               	movwf	6	;volatile
  3121                           
  3122                           ;main.c: 342: Pulse(2 * 20);
  3123  0396  3028               	movlw	40
  3124  0397  00F2               	movwf	Pulse@x
  3125  0398  3000               	movlw	0
  3126  0399  00F3               	movwf	Pulse@x+1
  3127  039A  120A  118A  21B6   	fcall	_Pulse
      +       120A  118A         
  3128                           
  3129                           ;main.c: 343: RB1 = 1;
  3130  039F  1283               	bcf	3,5	;RP0=0, select bank0
  3131  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  3132  03A1  1486               	bsf	6,1	;volatile
  3133                           
  3134                           ;main.c: 344: Delay(250 * 20);
  3135  03A2  3088               	movlw	136
  3136  03A3  00F0               	movwf	Delay@tmp
  3137  03A4  3013               	movlw	19
  3138  03A5  00F1               	movwf	Delay@tmp+1
  3139  03A6  120A  118A  210A   	fcall	_Delay
  3140  03A9  0008               	return
  3141  03AA                     __end_of_Send_Command_LCD:	
  3142                           
  3143                           	psect	text17
  3144  01B6                     __ptext17:	
  3145 ;; *************** function _Pulse *****************
  3146 ;; Defined at:
  3147 ;;		line 305 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;  x               2    2[COMMON] unsigned int 
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;		None
  3152 ;; Return value:  Size  Location     Type
  3153 ;;		None               void
  3154 ;; Registers used:
  3155 ;;		wreg, status,2, status,0, pclath, cstack
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3161 ;;      Params:         2       0       0       0       0
  3162 ;;      Locals:         0       0       0       0       0
  3163 ;;      Temps:          0       0       0       0       0
  3164 ;;      Totals:         2       0       0       0       0
  3165 ;;Total ram usage:        2 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; Hardware stack levels required when called:    1
  3168 ;; This function calls:
  3169 ;;		_Delay
  3170 ;; This function is called by:
  3171 ;;		_Init_LCD
  3172 ;;		_Send_Command_LCD
  3173 ;;		_Send_Byte_LCD
  3174 ;; This function uses a non-reentrant model
  3175 ;;
  3176                           
  3177                           
  3178                           ;psect for function _Pulse
  3179  01B6                     _Pulse:	
  3180                           
  3181                           ;main.c: 307: RB2=1;
  3182                           
  3183                           ;incstack = 0
  3184                           ; Regs used in _Pulse: [wreg+status,2+status,0+pclath+cstack]
  3185  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  3186  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  3187  01B8  1506               	bsf	6,2	;volatile
  3188                           
  3189                           ;main.c: 308: Delay(x);
  3190  01B9  0873               	movf	Pulse@x+1,w
  3191  01BA  01F1               	clrf	Delay@tmp+1
  3192  01BB  07F1               	addwf	Delay@tmp+1,f
  3193  01BC  0872               	movf	Pulse@x,w
  3194  01BD  01F0               	clrf	Delay@tmp
  3195  01BE  07F0               	addwf	Delay@tmp,f
  3196  01BF  120A  118A  210A   	fcall	_Delay
      +       120A  118A         
  3197                           
  3198                           ;main.c: 309: RB2=0;
  3199  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  3200  01C5  1303               	bcf	3,6	;RP1=0, select bank0
  3201  01C6  1106               	bcf	6,2	;volatile
  3202                           
  3203                           ;main.c: 310: Delay(x);
  3204  01C7  0873               	movf	Pulse@x+1,w
  3205  01C8  01F1               	clrf	Delay@tmp+1
  3206  01C9  07F1               	addwf	Delay@tmp+1,f
  3207  01CA  0872               	movf	Pulse@x,w
  3208  01CB  01F0               	clrf	Delay@tmp
  3209  01CC  07F0               	addwf	Delay@tmp,f
  3210  01CD  120A  118A  210A   	fcall	_Delay
  3211  01D0  0008               	return
  3212  01D1                     __end_of_Pulse:	
  3213                           
  3214                           	psect	text18
  3215  010A                     __ptext18:	
  3216 ;; *************** function _Delay *****************
  3217 ;; Defined at:
  3218 ;;		line 299 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;  tmp             2    0[COMMON] unsigned int 
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;		None
  3223 ;; Return value:  Size  Location     Type
  3224 ;;		None               void
  3225 ;; Registers used:
  3226 ;;		wreg
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3232 ;;      Params:         2       0       0       0       0
  3233 ;;      Locals:         0       0       0       0       0
  3234 ;;      Temps:          0       0       0       0       0
  3235 ;;      Totals:         2       0       0       0       0
  3236 ;;Total ram usage:        2 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; This function calls:
  3239 ;;		Nothing
  3240 ;; This function is called by:
  3241 ;;		_Pulse
  3242 ;;		_Init_LCD
  3243 ;;		_Send_Command_LCD
  3244 ;;		_Send_Byte_LCD
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           
  3249                           ;psect for function _Delay
  3250  010A                     _Delay:	
  3251  010A                     l1265:	
  3252                           ;main.c: 301: while(tmp--);
  3253                           
  3254                           ;incstack = 0
  3255                           ; Regs used in _Delay: [wreg]
  3256                           
  3257  010A  3001               	movlw	1
  3258  010B  02F0               	subwf	Delay@tmp,f
  3259  010C  3000               	movlw	0
  3260  010D  1C03               	skipc
  3261  010E  03F1               	decf	Delay@tmp+1,f
  3262  010F  02F1               	subwf	Delay@tmp+1,f
  3263  0110  30FF               	movlw	255
  3264  0111  0671               	xorwf	Delay@tmp+1,w
  3265  0112  1D03               	skipz
  3266  0113  2916               	goto	u575
  3267  0114  30FF               	movlw	255
  3268  0115  0670               	xorwf	Delay@tmp,w
  3269  0116                     u575:	
  3270  0116  1903               	btfsc	3,2
  3271                           
  3272                           ;main.c: 302: return;
  3273  0117  0008               	return
  3274  0118  290A               	goto	l1265
  3275  0119                     __end_of_Delay:	
  3276                           
  3277                           	psect	text19
  3278  021D                     __ptext19:	
  3279 ;; *************** function _Check_buttons *****************
  3280 ;; Defined at:
  3281 ;;		line 283 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  3282 ;; Parameters:    Size  Location     Type
  3283 ;;		None
  3284 ;; Auto vars:     Size  Location     Type
  3285 ;;  tmp_TRISB       1    3[COMMON] unsigned char 
  3286 ;;  tmp_PORTB       1    2[COMMON] unsigned char 
  3287 ;;  tmp             1    1[COMMON] unsigned char 
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  1    wreg      unsigned char 
  3290 ;; Registers used:
  3291 ;;		wreg, status,2, status,0
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3297 ;;      Params:         0       0       0       0       0
  3298 ;;      Locals:         3       0       0       0       0
  3299 ;;      Temps:          1       0       0       0       0
  3300 ;;      Totals:         4       0       0       0       0
  3301 ;;Total ram usage:        4 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; This function calls:
  3304 ;;		Nothing
  3305 ;; This function is called by:
  3306 ;;		_main
  3307 ;;		_Send_Command_LCD
  3308 ;;		_Send_Byte_LCD
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           
  3313                           ;psect for function _Check_buttons
  3314  021D                     _Check_buttons:	
  3315                           
  3316                           ;main.c: 285: byte tmp;
  3317                           ;main.c: 286: byte tmp_PORTB = PORTB;
  3318                           
  3319                           ;incstack = 0
  3320                           ; Regs used in _Check_buttons: [wreg+status,2+status,0]
  3321  021D  1283               	bcf	3,5	;RP0=0, select bank0
  3322  021E  1303               	bcf	3,6	;RP1=0, select bank0
  3323  021F  0806               	movf	6,w	;volatile
  3324  0220  00F0               	movwf	??_Check_buttons
  3325  0221  0870               	movf	??_Check_buttons,w
  3326  0222  00F2               	movwf	Check_buttons@tmp_PORTB
  3327                           
  3328                           ;main.c: 287: byte tmp_TRISB = TRISB;
  3329  0223  1683               	bsf	3,5	;RP0=1, select bank1
  3330  0224  1303               	bcf	3,6	;RP1=0, select bank1
  3331  0225  0806               	movf	6,w	;volatile
  3332  0226  00F0               	movwf	??_Check_buttons
  3333  0227  0870               	movf	??_Check_buttons,w
  3334  0228  00F3               	movwf	Check_buttons@tmp_TRISB
  3335                           
  3336                           ;main.c: 288: TRISB &= 0x0F;
  3337  0229  300F               	movlw	15
  3338  022A  00F0               	movwf	??_Check_buttons
  3339  022B  0870               	movf	??_Check_buttons,w
  3340  022C  0586               	andwf	6,f	;volatile
  3341                           
  3342                           ;main.c: 289: PORTB |= 0xF0;
  3343  022D  30F0               	movlw	240
  3344  022E  00F0               	movwf	??_Check_buttons
  3345  022F  0870               	movf	??_Check_buttons,w
  3346  0230  1283               	bcf	3,5	;RP0=0, select bank0
  3347  0231  1303               	bcf	3,6	;RP1=0, select bank0
  3348  0232  0486               	iorwf	6,f	;volatile
  3349                           
  3350                           ;main.c: 291: tmp = PORTB^0xFF;
  3351  0233  0906               	comf	6,w	;volatile
  3352  0234  00F0               	movwf	??_Check_buttons
  3353  0235  0870               	movf	??_Check_buttons,w
  3354  0236  00F1               	movwf	Check_buttons@tmp
  3355                           
  3356                           ;main.c: 292: PORTB = tmp_PORTB;
  3357  0237  0872               	movf	Check_buttons@tmp_PORTB,w
  3358  0238  0086               	movwf	6	;volatile
  3359                           
  3360                           ;main.c: 293: TRISB = tmp_TRISB;
  3361  0239  0873               	movf	Check_buttons@tmp_TRISB,w
  3362  023A  1683               	bsf	3,5	;RP0=1, select bank1
  3363  023B  1303               	bcf	3,6	;RP1=0, select bank1
  3364  023C  0086               	movwf	6	;volatile
  3365                           
  3366                           ;main.c: 294: return(tmp >> 4);
  3367  023D  0871               	movf	Check_buttons@tmp,w
  3368  023E  00F0               	movwf	??_Check_buttons
  3369  023F  3004               	movlw	4
  3370  0240                     u595:	
  3371  0240  1003               	clrc
  3372  0241  0CF0               	rrf	??_Check_buttons,f
  3373  0242  3EFF               	addlw	-1
  3374  0243  1D03               	skipz
  3375  0244  2A40               	goto	u595
  3376  0245  0870               	movf	??_Check_buttons,w
  3377  0246  0008               	return
  3378  0247                     __end_of_Check_buttons:	
  3379                           
  3380                           	psect	text20
  3381  013A                     __ptext20:	
  3382 ;; *************** function _IN_BYTE_NACK_STOP_I2C *****************
  3383 ;; Defined at:
  3384 ;;		line 500 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;		None
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;  t               1    6[COMMON] unsigned char 
  3389 ;; Return value:  Size  Location     Type
  3390 ;;                  1    wreg      unsigned char 
  3391 ;; Registers used:
  3392 ;;		wreg, status,2, status,0, pclath, cstack
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3398 ;;      Params:         0       0       0       0       0
  3399 ;;      Locals:         1       0       0       0       0
  3400 ;;      Temps:          1       0       0       0       0
  3401 ;;      Totals:         2       0       0       0       0
  3402 ;;Total ram usage:        2 bytes
  3403 ;; Hardware stack levels used:    1
  3404 ;; Hardware stack levels required when called:    4
  3405 ;; This function calls:
  3406 ;;		_IN_BYTE_I2C
  3407 ;;		_NACK_I2C
  3408 ;;		_STOP_I2C
  3409 ;; This function is called by:
  3410 ;;		_main
  3411 ;; This function uses a non-reentrant model
  3412 ;;
  3413                           
  3414                           
  3415                           ;psect for function _IN_BYTE_NACK_STOP_I2C
  3416  013A                     _IN_BYTE_NACK_STOP_I2C:	
  3417                           
  3418                           ;main.c: 502: byte t;
  3419                           ;main.c: 503: t = IN_BYTE_I2C();
  3420                           
  3421                           ;incstack = 0
  3422                           ; Regs used in _IN_BYTE_NACK_STOP_I2C: [wreg+status,2+status,0+pclath+cstack]
  3423  013A  120A  118A  21F4   	fcall	_IN_BYTE_I2C
      +       120A  118A         
  3424  013F  00F5               	movwf	??_IN_BYTE_NACK_STOP_I2C
  3425  0140  0875               	movf	??_IN_BYTE_NACK_STOP_I2C,w
  3426  0141  00F6               	movwf	IN_BYTE_NACK_STOP_I2C@t
  3427                           
  3428                           ;main.c: 504: NACK_I2C();
  3429  0142  120A  118A  20E9   	fcall	_NACK_I2C
      +       120A  118A         
  3430                           
  3431                           ;main.c: 505: STOP_I2C();
  3432  0147  120A  118A  2186   	fcall	_STOP_I2C
  3433  014A  0008               	return
  3434  014B                     __end_of_IN_BYTE_NACK_STOP_I2C:	
  3435                           ;main.c: 506: return(t);
  3436                           ;	Return value of _IN_BYTE_NACK_STOP_I2C is never used
  3437                           
  3438                           
  3439                           	psect	text21
  3440  0186                     __ptext21:	
  3441 ;; *************** function _STOP_I2C *****************
  3442 ;; Defined at:
  3443 ;;		line 543 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;		None
  3446 ;; Auto vars:     Size  Location     Type
  3447 ;;		None
  3448 ;; Return value:  Size  Location     Type
  3449 ;;		None               void
  3450 ;; Registers used:
  3451 ;;		wreg, status,2, status,0, pclath, cstack
  3452 ;; Tracked objects:
  3453 ;;		On entry : 0/0
  3454 ;;		On exit  : 0/0
  3455 ;;		Unchanged: 0/0
  3456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3457 ;;      Params:         0       0       0       0       0
  3458 ;;      Locals:         0       0       0       0       0
  3459 ;;      Temps:          0       0       0       0       0
  3460 ;;      Totals:         0       0       0       0       0
  3461 ;;Total ram usage:        0 bytes
  3462 ;; Hardware stack levels used:    1
  3463 ;; Hardware stack levels required when called:    2
  3464 ;; This function calls:
  3465 ;;		_HIGH_SCL_I2C
  3466 ;;		_HIGH_SDA_I2C
  3467 ;;		_LOW_SCL_I2C
  3468 ;;		_LOW_SDA_I2C
  3469 ;; This function is called by:
  3470 ;;		_main
  3471 ;;		_Init_WRITE_I2C
  3472 ;;		_IN_BYTE_NACK_STOP_I2C
  3473 ;;		_OUT_BYTE_PAGE_I2C
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           
  3478                           ;psect for function _STOP_I2C
  3479  0186                     _STOP_I2C:	
  3480                           
  3481                           ;main.c: 545: LOW_SDA_I2C();
  3482                           
  3483                           ;incstack = 0
  3484                           ; Regs used in _STOP_I2C: [wreg+status,2+status,0+pclath+cstack]
  3485  0186  120A  118A  2129   	fcall	_LOW_SDA_I2C
      +       120A  118A         
  3486                           
  3487                           ;main.c: 546: LOW_SCL_I2C();
  3488  018B  120A  118A  20F2   	fcall	_LOW_SCL_I2C
      +       120A  118A         
  3489                           
  3490                           ;main.c: 547: HIGH_SCL_I2C();
  3491  0190  120A  118A  20B7   	fcall	_HIGH_SCL_I2C
      +       120A  118A         
  3492                           
  3493                           ;main.c: 548: HIGH_SDA_I2C();
  3494  0195  120A  118A  20BF   	fcall	_HIGH_SDA_I2C
      +       120A  118A         
  3495                           
  3496                           ;main.c: 549: LOW_SCL_I2C();
  3497  019A  120A  118A  20F2   	fcall	_LOW_SCL_I2C
  3498  019D  0008               	return
  3499  019E                     __end_of_STOP_I2C:	
  3500                           
  3501                           	psect	text22
  3502  00E9                     __ptext22:	
  3503 ;; *************** function _NACK_I2C *****************
  3504 ;; Defined at:
  3505 ;;		line 572 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;		None
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;		None
  3510 ;; Return value:  Size  Location     Type
  3511 ;;		None               void
  3512 ;; Registers used:
  3513 ;;		wreg, status,2, status,0, pclath, cstack
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3519 ;;      Params:         0       0       0       0       0
  3520 ;;      Locals:         0       0       0       0       0
  3521 ;;      Temps:          0       0       0       0       0
  3522 ;;      Totals:         0       0       0       0       0
  3523 ;;Total ram usage:        0 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    3
  3526 ;; This function calls:
  3527 ;;		_CLOCK_PULSE_I2C
  3528 ;;		_HIGH_SDA_I2C
  3529 ;; This function is called by:
  3530 ;;		_IN_BYTE_NACK_STOP_I2C
  3531 ;; This function uses a non-reentrant model
  3532 ;;
  3533                           
  3534                           
  3535                           ;psect for function _NACK_I2C
  3536  00E9                     _NACK_I2C:	
  3537                           
  3538                           ;main.c: 574: HIGH_SDA_I2C();
  3539                           
  3540                           ;incstack = 0
  3541                           ; Regs used in _NACK_I2C: [wreg+status,2+status,0+pclath+cstack]
  3542  00E9  120A  118A  20BF   	fcall	_HIGH_SDA_I2C
      +       120A  118A         
  3543                           
  3544                           ;main.c: 575: CLOCK_PULSE_I2C();
  3545  00EE  120A  118A  20D7   	fcall	_CLOCK_PULSE_I2C
  3546  00F1  0008               	return
  3547  00F2                     __end_of_NACK_I2C:	
  3548                           
  3549                           	psect	text23
  3550  00FD                     __ptext23:	
  3551 ;; *************** function _IN_BYTE_ACK_I2C *****************
  3552 ;; Defined at:
  3553 ;;		line 474 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;		None
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;  t               1    6[COMMON] unsigned char 
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  1    wreg      unsigned char 
  3560 ;; Registers used:
  3561 ;;		wreg, status,2, status,0, pclath, cstack
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3567 ;;      Params:         0       0       0       0       0
  3568 ;;      Locals:         1       0       0       0       0
  3569 ;;      Temps:          1       0       0       0       0
  3570 ;;      Totals:         2       0       0       0       0
  3571 ;;Total ram usage:        2 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    4
  3574 ;; This function calls:
  3575 ;;		_ACK_I2C
  3576 ;;		_IN_BYTE_I2C
  3577 ;; This function is called by:
  3578 ;;		_main
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           
  3583                           ;psect for function _IN_BYTE_ACK_I2C
  3584  00FD                     _IN_BYTE_ACK_I2C:	
  3585                           
  3586                           ;main.c: 476: byte t;
  3587                           ;main.c: 477: t=IN_BYTE_I2C();
  3588                           
  3589                           ;incstack = 0
  3590                           ; Regs used in _IN_BYTE_ACK_I2C: [wreg+status,2+status,0+pclath+cstack]
  3591  00FD  120A  118A  21F4   	fcall	_IN_BYTE_I2C
      +       120A  118A         
  3592  0102  00F5               	movwf	??_IN_BYTE_ACK_I2C
  3593  0103  0875               	movf	??_IN_BYTE_ACK_I2C,w
  3594  0104  00F6               	movwf	IN_BYTE_ACK_I2C@t
  3595                           
  3596                           ;main.c: 478: ACK_I2C();
  3597  0105  120A  118A  20E0   	fcall	_ACK_I2C
  3598                           
  3599                           ;main.c: 479: return(t);
  3600  0108  0876               	movf	IN_BYTE_ACK_I2C@t,w
  3601  0109  0008               	return
  3602  010A                     __end_of_IN_BYTE_ACK_I2C:	
  3603                           
  3604                           	psect	text24
  3605  01F4                     __ptext24:	
  3606 ;; *************** function _IN_BYTE_I2C *****************
  3607 ;; Defined at:
  3608 ;;		line 482 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;		None
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;  t               1    4[COMMON] unsigned char 
  3613 ;;  tmp             1    3[COMMON] unsigned char 
  3614 ;; Return value:  Size  Location     Type
  3615 ;;                  1    wreg      unsigned char 
  3616 ;; Registers used:
  3617 ;;		wreg, status,2, status,0, pclath, cstack
  3618 ;; Tracked objects:
  3619 ;;		On entry : 0/0
  3620 ;;		On exit  : 0/0
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3623 ;;      Params:         0       0       0       0       0
  3624 ;;      Locals:         2       0       0       0       0
  3625 ;;      Temps:          1       0       0       0       0
  3626 ;;      Totals:         3       0       0       0       0
  3627 ;;Total ram usage:        3 bytes
  3628 ;; Hardware stack levels used:    1
  3629 ;; Hardware stack levels required when called:    2
  3630 ;; This function calls:
  3631 ;;		_HIGH_SCL_I2C
  3632 ;;		_HIGH_SDA_I2C
  3633 ;;		_LOW_SCL_I2C
  3634 ;; This function is called by:
  3635 ;;		_IN_BYTE_ACK_I2C
  3636 ;;		_IN_BYTE_NACK_STOP_I2C
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           
  3641                           ;psect for function _IN_BYTE_I2C
  3642  01F4                     _IN_BYTE_I2C:	
  3643                           
  3644                           ;main.c: 484: byte t,tmp=8;
  3645                           
  3646                           ;incstack = 0
  3647                           ; Regs used in _IN_BYTE_I2C: [wreg+status,2+status,0+pclath+cstack]
  3648  01F4  3008               	movlw	8
  3649  01F5  00F2               	movwf	??_IN_BYTE_I2C
  3650  01F6  0872               	movf	??_IN_BYTE_I2C,w
  3651  01F7  00F3               	movwf	IN_BYTE_I2C@tmp
  3652                           
  3653                           ;main.c: 485: t=0;
  3654  01F8  01F4               	clrf	IN_BYTE_I2C@t
  3655                           
  3656                           ;main.c: 486: HIGH_SDA_I2C();
  3657  01F9  120A  118A  20BF   	fcall	_HIGH_SDA_I2C
      +       120A  118A         
  3658  01FE                     l1419:	
  3659                           ;main.c: 487: while (tmp--)
  3660                           
  3661  01FE  3001               	movlw	1
  3662  01FF  02F3               	subwf	IN_BYTE_I2C@tmp,f
  3663  0200  0873               	movf	IN_BYTE_I2C@tmp,w
  3664  0201  3AFF               	xorlw	255
  3665  0202  1903               	btfsc	3,2
  3666  0203  2A1B               	goto	l1421
  3667                           
  3668                           ;main.c: 488: {
  3669                           ;main.c: 489: t += t;
  3670  0204  0874               	movf	IN_BYTE_I2C@t,w
  3671  0205  00F2               	movwf	??_IN_BYTE_I2C
  3672  0206  0872               	movf	??_IN_BYTE_I2C,w
  3673  0207  07F4               	addwf	IN_BYTE_I2C@t,f
  3674                           
  3675                           ;main.c: 490: HIGH_SCL_I2C();
  3676  0208  120A  118A  20B7   	fcall	_HIGH_SCL_I2C
      +       120A  118A         
  3677                           
  3678                           ;main.c: 491: if(((PORTC) & (1 <<(4))))
  3679  020D  1283               	bcf	3,5	;RP0=0, select bank0
  3680  020E  1303               	bcf	3,6	;RP1=0, select bank0
  3681  020F  1E07               	btfss	7,4	;volatile
  3682  0210  2A15               	goto	l1417
  3683                           
  3684                           ;main.c: 492: {
  3685                           ;main.c: 493: t++;
  3686  0211  3001               	movlw	1
  3687  0212  00F2               	movwf	??_IN_BYTE_I2C
  3688  0213  0872               	movf	??_IN_BYTE_I2C,w
  3689  0214  07F4               	addwf	IN_BYTE_I2C@t,f
  3690  0215                     l1417:	
  3691                           
  3692                           ;main.c: 494: }
  3693                           ;main.c: 495: LOW_SCL_I2C();
  3694  0215  120A  118A  20F2   	fcall	_LOW_SCL_I2C
      +       120A  118A         
  3695  021A  29FE               	goto	l1419
  3696  021B                     l1421:	
  3697                           
  3698                           ;main.c: 496: }
  3699                           ;main.c: 497: return(t);
  3700  021B  0874               	movf	IN_BYTE_I2C@t,w
  3701  021C  0008               	return
  3702  021D                     __end_of_IN_BYTE_I2C:	
  3703                           
  3704                           	psect	text25
  3705  00BF                     __ptext25:	
  3706 ;; *************** function _HIGH_SDA_I2C *****************
  3707 ;; Defined at:
  3708 ;;		line 463 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;		None
  3711 ;; Auto vars:     Size  Location     Type
  3712 ;;		None
  3713 ;; Return value:  Size  Location     Type
  3714 ;;		None               void
  3715 ;; Registers used:
  3716 ;;		wreg, status,2, status,0, pclath, cstack
  3717 ;; Tracked objects:
  3718 ;;		On entry : 0/0
  3719 ;;		On exit  : 0/0
  3720 ;;		Unchanged: 0/0
  3721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3722 ;;      Params:         0       0       0       0       0
  3723 ;;      Locals:         0       0       0       0       0
  3724 ;;      Temps:          0       0       0       0       0
  3725 ;;      Totals:         0       0       0       0       0
  3726 ;;Total ram usage:        0 bytes
  3727 ;; Hardware stack levels used:    1
  3728 ;; Hardware stack levels required when called:    1
  3729 ;; This function calls:
  3730 ;;		_Delay_Fast
  3731 ;; This function is called by:
  3732 ;;		_START_I2C
  3733 ;;		_IN_BYTE_I2C
  3734 ;;		_OUT_BYTE_I2C
  3735 ;;		_STOP_I2C
  3736 ;;		_NACK_I2C
  3737 ;; This function uses a non-reentrant model
  3738 ;;
  3739                           
  3740                           
  3741                           ;psect for function _HIGH_SDA_I2C
  3742  00BF                     _HIGH_SDA_I2C:	
  3743                           
  3744                           ;main.c: 465: ((TRISC) |= (1 << (4)));
  3745                           
  3746                           ;incstack = 0
  3747                           ; Regs used in _HIGH_SDA_I2C: [wreg+status,2+status,0+pclath+cstack]
  3748  00BF  1683               	bsf	3,5	;RP0=1, select bank1
  3749  00C0  1303               	bcf	3,6	;RP1=0, select bank1
  3750  00C1  1607               	bsf	7,4	;volatile
  3751                           
  3752                           ;main.c: 466: Delay_Fast(5);
  3753  00C2  3005               	movlw	5
  3754  00C3  120A  118A  20AF   	fcall	_Delay_Fast
  3755  00C6  0008               	return
  3756  00C7                     __end_of_HIGH_SDA_I2C:	
  3757                           
  3758                           	psect	text26
  3759  00E0                     __ptext26:	
  3760 ;; *************** function _ACK_I2C *****************
  3761 ;; Defined at:
  3762 ;;		line 578 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  3763 ;; Parameters:    Size  Location     Type
  3764 ;;		None
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;		None
  3767 ;; Return value:  Size  Location     Type
  3768 ;;		None               void
  3769 ;; Registers used:
  3770 ;;		wreg, status,2, status,0, pclath, cstack
  3771 ;; Tracked objects:
  3772 ;;		On entry : 0/0
  3773 ;;		On exit  : 0/0
  3774 ;;		Unchanged: 0/0
  3775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3776 ;;      Params:         0       0       0       0       0
  3777 ;;      Locals:         0       0       0       0       0
  3778 ;;      Temps:          0       0       0       0       0
  3779 ;;      Totals:         0       0       0       0       0
  3780 ;;Total ram usage:        0 bytes
  3781 ;; Hardware stack levels used:    1
  3782 ;; Hardware stack levels required when called:    3
  3783 ;; This function calls:
  3784 ;;		_CLOCK_PULSE_I2C
  3785 ;;		_LOW_SDA_I2C
  3786 ;; This function is called by:
  3787 ;;		_IN_BYTE_ACK_I2C
  3788 ;; This function uses a non-reentrant model
  3789 ;;
  3790                           
  3791                           
  3792                           ;psect for function _ACK_I2C
  3793  00E0                     _ACK_I2C:	
  3794                           
  3795                           ;main.c: 580: LOW_SDA_I2C();
  3796                           
  3797                           ;incstack = 0
  3798                           ; Regs used in _ACK_I2C: [wreg+status,2+status,0+pclath+cstack]
  3799  00E0  120A  118A  2129   	fcall	_LOW_SDA_I2C
      +       120A  118A         
  3800                           
  3801                           ;main.c: 581: CLOCK_PULSE_I2C();
  3802  00E5  120A  118A  20D7   	fcall	_CLOCK_PULSE_I2C
  3803  00E8  0008               	return
  3804  00E9                     __end_of_ACK_I2C:	
  3805                           
  3806                           	psect	text27
  3807  0129                     __ptext27:	
  3808 ;; *************** function _LOW_SDA_I2C *****************
  3809 ;; Defined at:
  3810 ;;		line 456 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;		None
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;		None
  3815 ;; Return value:  Size  Location     Type
  3816 ;;		None               void
  3817 ;; Registers used:
  3818 ;;		wreg, status,2, status,0, pclath, cstack
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3824 ;;      Params:         0       0       0       0       0
  3825 ;;      Locals:         0       0       0       0       0
  3826 ;;      Temps:          1       0       0       0       0
  3827 ;;      Totals:         1       0       0       0       0
  3828 ;;Total ram usage:        1 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; Hardware stack levels required when called:    1
  3831 ;; This function calls:
  3832 ;;		_Delay_Fast
  3833 ;; This function is called by:
  3834 ;;		_START_I2C
  3835 ;;		_OUT_BYTE_I2C
  3836 ;;		_STOP_I2C
  3837 ;;		_ACK_I2C
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841                           
  3842                           ;psect for function _LOW_SDA_I2C
  3843  0129                     _LOW_SDA_I2C:	
  3844                           
  3845                           ;main.c: 458: ((PORTC) &= ~(1 << (4)));
  3846                           
  3847                           ;incstack = 0
  3848                           ; Regs used in _LOW_SDA_I2C: [wreg+status,2+status,0+pclath+cstack]
  3849  0129  30EF               	movlw	239
  3850  012A  00F1               	movwf	??_LOW_SDA_I2C
  3851  012B  0871               	movf	??_LOW_SDA_I2C,w
  3852  012C  1283               	bcf	3,5	;RP0=0, select bank0
  3853  012D  1303               	bcf	3,6	;RP1=0, select bank0
  3854  012E  0587               	andwf	7,f	;volatile
  3855                           
  3856                           ;main.c: 459: ((TRISC) &= ~(1 << (4)));
  3857  012F  30EF               	movlw	239
  3858  0130  00F1               	movwf	??_LOW_SDA_I2C
  3859  0131  0871               	movf	??_LOW_SDA_I2C,w
  3860  0132  1683               	bsf	3,5	;RP0=1, select bank1
  3861  0133  1303               	bcf	3,6	;RP1=0, select bank1
  3862  0134  0587               	andwf	7,f	;volatile
  3863                           
  3864                           ;main.c: 460: Delay_Fast(5);
  3865  0135  3005               	movlw	5
  3866  0136  120A  118A  20AF   	fcall	_Delay_Fast
  3867  0139  0008               	return
  3868  013A                     __end_of_LOW_SDA_I2C:	
  3869                           
  3870                           	psect	text28
  3871  00D7                     __ptext28:	
  3872 ;; *************** function _CLOCK_PULSE_I2C *****************
  3873 ;; Defined at:
  3874 ;;		line 552 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;		None
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;		None
  3879 ;; Return value:  Size  Location     Type
  3880 ;;		None               void
  3881 ;; Registers used:
  3882 ;;		wreg, status,2, status,0, pclath, cstack
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3888 ;;      Params:         0       0       0       0       0
  3889 ;;      Locals:         0       0       0       0       0
  3890 ;;      Temps:          0       0       0       0       0
  3891 ;;      Totals:         0       0       0       0       0
  3892 ;;Total ram usage:        0 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    2
  3895 ;; This function calls:
  3896 ;;		_HIGH_SCL_I2C
  3897 ;;		_LOW_SCL_I2C
  3898 ;; This function is called by:
  3899 ;;		_OUT_BYTE_I2C
  3900 ;;		_NACK_I2C
  3901 ;;		_ACK_I2C
  3902 ;; This function uses a non-reentrant model
  3903 ;;
  3904                           
  3905                           
  3906                           ;psect for function _CLOCK_PULSE_I2C
  3907  00D7                     _CLOCK_PULSE_I2C:	
  3908                           
  3909                           ;main.c: 554: HIGH_SCL_I2C();
  3910                           
  3911                           ;incstack = 0
  3912                           ; Regs used in _CLOCK_PULSE_I2C: [wreg+status,2+status,0+pclath+cstack]
  3913  00D7  120A  118A  20B7   	fcall	_HIGH_SCL_I2C
      +       120A  118A         
  3914                           
  3915                           ;main.c: 555: LOW_SCL_I2C();
  3916  00DC  120A  118A  20F2   	fcall	_LOW_SCL_I2C
  3917  00DF  0008               	return
  3918  00E0                     __end_of_CLOCK_PULSE_I2C:	
  3919                           
  3920                           	psect	text29
  3921  00F2                     __ptext29:	
  3922 ;; *************** function _LOW_SCL_I2C *****************
  3923 ;; Defined at:
  3924 ;;		line 442 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;		None
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;		None
  3929 ;; Return value:  Size  Location     Type
  3930 ;;		None               void
  3931 ;; Registers used:
  3932 ;;		wreg, status,2, status,0, pclath, cstack
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3938 ;;      Params:         0       0       0       0       0
  3939 ;;      Locals:         0       0       0       0       0
  3940 ;;      Temps:          1       0       0       0       0
  3941 ;;      Totals:         1       0       0       0       0
  3942 ;;Total ram usage:        1 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:    1
  3945 ;; This function calls:
  3946 ;;		_Delay_Fast
  3947 ;; This function is called by:
  3948 ;;		_START_I2C
  3949 ;;		_IN_BYTE_I2C
  3950 ;;		_STOP_I2C
  3951 ;;		_CLOCK_PULSE_I2C
  3952 ;;		_Check_ACK_I2C
  3953 ;; This function uses a non-reentrant model
  3954 ;;
  3955                           
  3956                           
  3957                           ;psect for function _LOW_SCL_I2C
  3958  00F2                     _LOW_SCL_I2C:	
  3959                           
  3960                           ;main.c: 445: ((PORTC) &= ~(1 << (3)));
  3961                           
  3962                           ;incstack = 0
  3963                           ; Regs used in _LOW_SCL_I2C: [wreg+status,2+status,0+pclath+cstack]
  3964  00F2  30F7               	movlw	247
  3965  00F3  00F1               	movwf	??_LOW_SCL_I2C
  3966  00F4  0871               	movf	??_LOW_SCL_I2C,w
  3967  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  3968  00F6  1303               	bcf	3,6	;RP1=0, select bank0
  3969  00F7  0587               	andwf	7,f	;volatile
  3970                           
  3971                           ;main.c: 446: Delay_Fast(5);
  3972  00F8  3005               	movlw	5
  3973  00F9  120A  118A  20AF   	fcall	_Delay_Fast
  3974  00FC  0008               	return
  3975  00FD                     __end_of_LOW_SCL_I2C:	
  3976                           
  3977                           	psect	text30
  3978  00B7                     __ptext30:	
  3979 ;; *************** function _HIGH_SCL_I2C *****************
  3980 ;; Defined at:
  3981 ;;		line 449 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;		None
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;		None
  3986 ;; Return value:  Size  Location     Type
  3987 ;;		None               void
  3988 ;; Registers used:
  3989 ;;		wreg, status,2, status,0, pclath, cstack
  3990 ;; Tracked objects:
  3991 ;;		On entry : 0/0
  3992 ;;		On exit  : 0/0
  3993 ;;		Unchanged: 0/0
  3994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3995 ;;      Params:         0       0       0       0       0
  3996 ;;      Locals:         0       0       0       0       0
  3997 ;;      Temps:          0       0       0       0       0
  3998 ;;      Totals:         0       0       0       0       0
  3999 ;;Total ram usage:        0 bytes
  4000 ;; Hardware stack levels used:    1
  4001 ;; Hardware stack levels required when called:    1
  4002 ;; This function calls:
  4003 ;;		_Delay_Fast
  4004 ;; This function is called by:
  4005 ;;		_START_I2C
  4006 ;;		_IN_BYTE_I2C
  4007 ;;		_STOP_I2C
  4008 ;;		_CLOCK_PULSE_I2C
  4009 ;;		_Check_ACK_I2C
  4010 ;; This function uses a non-reentrant model
  4011 ;;
  4012                           
  4013                           
  4014                           ;psect for function _HIGH_SCL_I2C
  4015  00B7                     _HIGH_SCL_I2C:	
  4016                           
  4017                           ;main.c: 452: ((PORTC) |= (1 << (3)));
  4018                           
  4019                           ;incstack = 0
  4020                           ; Regs used in _HIGH_SCL_I2C: [wreg+status,2+status,0+pclath+cstack]
  4021  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  4022  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  4023  00B9  1587               	bsf	7,3	;volatile
  4024                           
  4025                           ;main.c: 453: Delay_Fast(5);
  4026  00BA  3005               	movlw	5
  4027  00BB  120A  118A  20AF   	fcall	_Delay_Fast
  4028  00BE  0008               	return
  4029  00BF                     __end_of_HIGH_SCL_I2C:	
  4030                           
  4031                           	psect	text31
  4032  00AF                     __ptext31:	
  4033 ;; *************** function _Delay_Fast *****************
  4034 ;; Defined at:
  4035 ;;		line 469 in file "D:\study\7_semester\Microprocessor_systems\Course_Work\main.c"
  4036 ;; Parameters:    Size  Location     Type
  4037 ;;  i               1    wreg     unsigned char 
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;  i               1    0[COMMON] unsigned char 
  4040 ;; Return value:  Size  Location     Type
  4041 ;;		None               void
  4042 ;; Registers used:
  4043 ;;		wreg, status,2, status,0
  4044 ;; Tracked objects:
  4045 ;;		On entry : 0/0
  4046 ;;		On exit  : 0/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4049 ;;      Params:         0       0       0       0       0
  4050 ;;      Locals:         1       0       0       0       0
  4051 ;;      Temps:          0       0       0       0       0
  4052 ;;      Totals:         1       0       0       0       0
  4053 ;;Total ram usage:        1 bytes
  4054 ;; Hardware stack levels used:    1
  4055 ;; This function calls:
  4056 ;;		Nothing
  4057 ;; This function is called by:
  4058 ;;		_LOW_SCL_I2C
  4059 ;;		_HIGH_SCL_I2C
  4060 ;;		_LOW_SDA_I2C
  4061 ;;		_HIGH_SDA_I2C
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           
  4066                           ;psect for function _Delay_Fast
  4067  00AF                     _Delay_Fast:	
  4068                           
  4069                           ;incstack = 0
  4070                           ; Regs used in _Delay_Fast: [wreg+status,2+status,0]
  4071                           ;Delay_Fast@i stored from wreg
  4072  00AF  00F0               	movwf	Delay_Fast@i
  4073  00B0                     l1269:	
  4074                           ;main.c: 471: while (i--);
  4075                           
  4076  00B0  3001               	movlw	1
  4077  00B1  02F0               	subwf	Delay_Fast@i,f
  4078  00B2  0870               	movf	Delay_Fast@i,w
  4079  00B3  3AFF               	xorlw	255
  4080  00B4  1903               	btfsc	3,2
  4081  00B5  0008               	return
  4082  00B6  28B0               	goto	l1269
  4083  00B7                     __end_of_Delay_Fast:	
  4084  007E                     btemp	set	126	;btemp
  4085  007E                     wtemp	set	126
  4086  007E                     wtemp0	set	126
  4087  0080                     wtemp1	set	128
  4088  0082                     wtemp2	set	130
  4089  0084                     wtemp3	set	132
  4090  0086                     wtemp4	set	134
  4091  0088                     wtemp5	set	136
  4092  007F                     wtemp6	set	127
  4093  007E                     ttemp	set	126
  4094  007E                     ttemp0	set	126
  4095  0081                     ttemp1	set	129
  4096  0084                     ttemp2	set	132
  4097  0087                     ttemp3	set	135
  4098  007F                     ttemp4	set	127
  4099  007E                     ltemp	set	126
  4100  007E                     ltemp0	set	126
  4101  0082                     ltemp1	set	130
  4102  0086                     ltemp2	set	134
  4103  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    17
    Data        0
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     27      67
    BANK1            80      0      80
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Show_String_LCD@mySTRING	PTR const unsigned char  size(2) Largest target is 17
		 -> str_BLANK(CODE[17]), str_line1(BANK1[16]), str_line0(BANK0[16]), 


Critical Paths under _main in COMMON

    _main->_Restart
    _power->___lmul
    _Restart->_Clr_LCD
    _Clr_LCD->_Set_Coord_LCD
    _Clr_LCD->_Show_String_LCD
    _Show_String_LCD->_Send_Byte_LCD
    _Send_Byte_LCD->_Check_buttons
    _Send_Byte_LCD->_Pulse
    _Set_Coord_LCD->_Send_Command_LCD
    _OUT_BYTE_PAGE_I2C->_Init_WRITE_I2C
    _Init_READ_I2C->_Init_WRITE_I2C
    _Init_WRITE_I2C->_OUT_BYTE_I2C
    _START_I2C->_LOW_SCL_I2C
    _START_I2C->_LOW_SDA_I2C
    _OUT_BYTE_I2C->_LOW_SDA_I2C
    _Check_ACK_I2C->_LOW_SCL_I2C
    _Init_LCD->_Send_Command_LCD
    _Send_Command_LCD->_Check_buttons
    _Send_Command_LCD->_Pulse
    _Pulse->_Delay
    _IN_BYTE_NACK_STOP_I2C->_IN_BYTE_I2C
    _STOP_I2C->_LOW_SCL_I2C
    _STOP_I2C->_LOW_SDA_I2C
    _IN_BYTE_ACK_I2C->_IN_BYTE_I2C
    _IN_BYTE_I2C->_LOW_SCL_I2C
    _HIGH_SDA_I2C->_Delay_Fast
    _ACK_I2C->_LOW_SDA_I2C
    _LOW_SDA_I2C->_Delay_Fast
    _CLOCK_PULSE_I2C->_LOW_SCL_I2C
    _LOW_SCL_I2C->_Delay_Fast
    _HIGH_SCL_I2C->_Delay_Fast

Critical Paths under _main in BANK0

    _main->_power

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   16907
                                             10 BANK0     17    17      0
                      _Check_buttons
                            _Clr_LCD
                    _IN_BYTE_ACK_I2C
              _IN_BYTE_NACK_STOP_I2C
                           _Init_LCD
                      _Init_READ_I2C
                     _Init_WRITE_I2C
                  _OUT_BYTE_PAGE_I2C
                            _Restart
                           _STOP_I2C
                      _Set_Coord_LCD
                    _Show_String_LCD
                             ___lmul
                           _init_I2C
                              _power
 ---------------------------------------------------------------------------------
 (1) _power                                               10     4      6     675
                                              0 BANK0     10     4      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     410
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (1) _init_I2C                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Restart                                              4     4      0    3403
                                             10 COMMON     4     4      0
                            _Clr_LCD
 ---------------------------------------------------------------------------------
 (2) _Clr_LCD                                              1     1      0    3291
                                              9 COMMON     1     1      0
                      _Set_Coord_LCD
                    _Show_String_LCD
 ---------------------------------------------------------------------------------
 (1) _Show_String_LCD                                      2     0      2    1624
                                              7 COMMON     2     0      2
                      _Send_Byte_LCD
 ---------------------------------------------------------------------------------
 (2) _Send_Byte_LCD                                        3     3      0    1261
                                              4 COMMON     3     3      0
                      _Check_buttons
                              _Delay
                              _Pulse
 ---------------------------------------------------------------------------------
 (1) _Set_Coord_LCD                                        2     1      1    1645
                                              7 COMMON     2     1      1
                   _Send_Command_LCD
 ---------------------------------------------------------------------------------
 (1) _OUT_BYTE_PAGE_I2C                                    3     3      0     911
                                              8 COMMON     3     3      0
                     _Init_WRITE_I2C
                       _OUT_BYTE_I2C
                           _STOP_I2C
 ---------------------------------------------------------------------------------
 (1) _Init_READ_I2C                                        2     0      2     964
                                              8 COMMON     2     0      2
                     _Init_WRITE_I2C
                       _OUT_BYTE_I2C
                          _START_I2C
 ---------------------------------------------------------------------------------
 (2) _Init_WRITE_I2C                                       3     1      2     601
                                              5 COMMON     3     1      2
                       _OUT_BYTE_I2C
                          _START_I2C
                           _STOP_I2C
 ---------------------------------------------------------------------------------
 (3) _START_I2C                                            0     0      0      88
                       _HIGH_SCL_I2C
                       _HIGH_SDA_I2C
                        _LOW_SCL_I2C
                        _LOW_SDA_I2C
 ---------------------------------------------------------------------------------
 (2) _OUT_BYTE_I2C                                         3     3      0     200
                                              2 COMMON     3     3      0
                    _CLOCK_PULSE_I2C
                      _Check_ACK_I2C
                       _HIGH_SDA_I2C
                        _LOW_SDA_I2C
 ---------------------------------------------------------------------------------
 (3) _Check_ACK_I2C                                        0     0      0      44
                       _HIGH_SCL_I2C
                        _LOW_SCL_I2C
 ---------------------------------------------------------------------------------
 (1) _Init_LCD                                             0     0      0    2409
                              _Delay
                              _Pulse
                   _Send_Command_LCD
 ---------------------------------------------------------------------------------
 (2) _Send_Command_LCD                                     3     3      0    1261
                                              4 COMMON     3     3      0
                      _Check_buttons
                              _Delay
                              _Pulse
 ---------------------------------------------------------------------------------
 (3) _Pulse                                                2     0      2     808
                                              2 COMMON     2     0      2
                              _Delay
 ---------------------------------------------------------------------------------
 (4) _Delay                                                2     0      2     340
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _Check_buttons                                        4     4      0      69
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _IN_BYTE_NACK_STOP_I2C                                2     2      0     297
                                              5 COMMON     2     2      0
                        _IN_BYTE_I2C
                           _NACK_I2C
                           _STOP_I2C
 ---------------------------------------------------------------------------------
 (1) _STOP_I2C                                             0     0      0      88
                       _HIGH_SCL_I2C
                       _HIGH_SDA_I2C
                        _LOW_SCL_I2C
                        _LOW_SDA_I2C
 ---------------------------------------------------------------------------------
 (2) _NACK_I2C                                             0     0      0      66
                    _CLOCK_PULSE_I2C
                       _HIGH_SDA_I2C
 ---------------------------------------------------------------------------------
 (1) _IN_BYTE_ACK_I2C                                      2     2      0     225
                                              5 COMMON     2     2      0
                            _ACK_I2C
                        _IN_BYTE_I2C
 ---------------------------------------------------------------------------------
 (2) _IN_BYTE_I2C                                          3     3      0     136
                                              2 COMMON     3     3      0
                       _HIGH_SCL_I2C
                       _HIGH_SDA_I2C
                        _LOW_SCL_I2C
 ---------------------------------------------------------------------------------
 (2) _HIGH_SDA_I2C                                         0     0      0      22
                         _Delay_Fast
 ---------------------------------------------------------------------------------
 (2) _ACK_I2C                                              0     0      0      66
                    _CLOCK_PULSE_I2C
                        _LOW_SDA_I2C
 ---------------------------------------------------------------------------------
 (2) _LOW_SDA_I2C                                          1     1      0      22
                                              1 COMMON     1     1      0
                         _Delay_Fast
 ---------------------------------------------------------------------------------
 (3) _CLOCK_PULSE_I2C                                      0     0      0      44
                       _HIGH_SCL_I2C
                        _LOW_SCL_I2C
 ---------------------------------------------------------------------------------
 (2) _LOW_SCL_I2C                                          1     1      0      22
                                              1 COMMON     1     1      0
                         _Delay_Fast
 ---------------------------------------------------------------------------------
 (2) _HIGH_SCL_I2C                                         0     0      0      22
                         _Delay_Fast
 ---------------------------------------------------------------------------------
 (3) _Delay_Fast                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Check_buttons
   _Clr_LCD
     _Set_Coord_LCD
       _Send_Command_LCD
         _Check_buttons
         _Delay
         _Pulse
           _Delay
     _Show_String_LCD
       _Send_Byte_LCD
         _Check_buttons
         _Delay
         _Pulse
           _Delay
   _IN_BYTE_ACK_I2C
     _ACK_I2C
       _CLOCK_PULSE_I2C
         _HIGH_SCL_I2C
           _Delay_Fast
         _LOW_SCL_I2C
           _Delay_Fast
       _LOW_SDA_I2C
         _Delay_Fast
     _IN_BYTE_I2C
       _HIGH_SCL_I2C
         _Delay_Fast
       _HIGH_SDA_I2C
         _Delay_Fast
       _LOW_SCL_I2C
         _Delay_Fast
   _IN_BYTE_NACK_STOP_I2C
     _IN_BYTE_I2C
       _HIGH_SCL_I2C
         _Delay_Fast
       _HIGH_SDA_I2C
         _Delay_Fast
       _LOW_SCL_I2C
         _Delay_Fast
     _NACK_I2C
       _CLOCK_PULSE_I2C
         _HIGH_SCL_I2C
           _Delay_Fast
         _LOW_SCL_I2C
           _Delay_Fast
       _HIGH_SDA_I2C
         _Delay_Fast
     _STOP_I2C
       _HIGH_SCL_I2C
         _Delay_Fast
       _HIGH_SDA_I2C
         _Delay_Fast
       _LOW_SCL_I2C
         _Delay_Fast
       _LOW_SDA_I2C
         _Delay_Fast
   _Init_LCD
     _Delay
     _Pulse
       _Delay
     _Send_Command_LCD
       _Check_buttons
       _Delay
       _Pulse
         _Delay
   _Init_READ_I2C
     _Init_WRITE_I2C
       _OUT_BYTE_I2C
         _CLOCK_PULSE_I2C
           _HIGH_SCL_I2C
             _Delay_Fast
           _LOW_SCL_I2C
             _Delay_Fast
         _Check_ACK_I2C
           _HIGH_SCL_I2C
             _Delay_Fast
           _LOW_SCL_I2C
             _Delay_Fast
         _HIGH_SDA_I2C
           _Delay_Fast
         _LOW_SDA_I2C
           _Delay_Fast
       _START_I2C
         _HIGH_SCL_I2C
           _Delay_Fast
         _HIGH_SDA_I2C
           _Delay_Fast
         _LOW_SCL_I2C
           _Delay_Fast
         _LOW_SDA_I2C
           _Delay_Fast
       _STOP_I2C
         _HIGH_SCL_I2C
           _Delay_Fast
         _HIGH_SDA_I2C
           _Delay_Fast
         _LOW_SCL_I2C
           _Delay_Fast
         _LOW_SDA_I2C
           _Delay_Fast
     _OUT_BYTE_I2C
       _CLOCK_PULSE_I2C
         _HIGH_SCL_I2C
           _Delay_Fast
         _LOW_SCL_I2C
           _Delay_Fast
       _Check_ACK_I2C
         _HIGH_SCL_I2C
           _Delay_Fast
         _LOW_SCL_I2C
           _Delay_Fast
       _HIGH_SDA_I2C
         _Delay_Fast
       _LOW_SDA_I2C
         _Delay_Fast
     _START_I2C
       _HIGH_SCL_I2C
         _Delay_Fast
       _HIGH_SDA_I2C
         _Delay_Fast
       _LOW_SCL_I2C
         _Delay_Fast
       _LOW_SDA_I2C
         _Delay_Fast
   _Init_WRITE_I2C
     _OUT_BYTE_I2C
       _CLOCK_PULSE_I2C
         _HIGH_SCL_I2C
           _Delay_Fast
         _LOW_SCL_I2C
           _Delay_Fast
       _Check_ACK_I2C
         _HIGH_SCL_I2C
           _Delay_Fast
         _LOW_SCL_I2C
           _Delay_Fast
       _HIGH_SDA_I2C
         _Delay_Fast
       _LOW_SDA_I2C
         _Delay_Fast
     _START_I2C
       _HIGH_SCL_I2C
         _Delay_Fast
       _HIGH_SDA_I2C
         _Delay_Fast
       _LOW_SCL_I2C
         _Delay_Fast
       _LOW_SDA_I2C
         _Delay_Fast
     _STOP_I2C
       _HIGH_SCL_I2C
         _Delay_Fast
       _HIGH_SDA_I2C
         _Delay_Fast
       _LOW_SCL_I2C
         _Delay_Fast
       _LOW_SDA_I2C
         _Delay_Fast
   _OUT_BYTE_PAGE_I2C
     _Init_WRITE_I2C
       _OUT_BYTE_I2C
         _CLOCK_PULSE_I2C
           _HIGH_SCL_I2C
             _Delay_Fast
           _LOW_SCL_I2C
             _Delay_Fast
         _Check_ACK_I2C
           _HIGH_SCL_I2C
             _Delay_Fast
           _LOW_SCL_I2C
             _Delay_Fast
         _HIGH_SDA_I2C
           _Delay_Fast
         _LOW_SDA_I2C
           _Delay_Fast
       _START_I2C
         _HIGH_SCL_I2C
           _Delay_Fast
         _HIGH_SDA_I2C
           _Delay_Fast
         _LOW_SCL_I2C
           _Delay_Fast
         _LOW_SDA_I2C
           _Delay_Fast
       _STOP_I2C
         _HIGH_SCL_I2C
           _Delay_Fast
         _HIGH_SDA_I2C
           _Delay_Fast
         _LOW_SCL_I2C
           _Delay_Fast
         _LOW_SDA_I2C
           _Delay_Fast
     _OUT_BYTE_I2C
       _CLOCK_PULSE_I2C
         _HIGH_SCL_I2C
           _Delay_Fast
         _LOW_SCL_I2C
           _Delay_Fast
       _Check_ACK_I2C
         _HIGH_SCL_I2C
           _Delay_Fast
         _LOW_SCL_I2C
           _Delay_Fast
       _HIGH_SDA_I2C
         _Delay_Fast
       _LOW_SDA_I2C
         _Delay_Fast
     _STOP_I2C
       _HIGH_SCL_I2C
         _Delay_Fast
       _HIGH_SDA_I2C
         _Delay_Fast
       _LOW_SCL_I2C
         _Delay_Fast
       _LOW_SDA_I2C
         _Delay_Fast
   _Restart
     _Clr_LCD
       _Set_Coord_LCD
         _Send_Command_LCD
           _Check_buttons
           _Delay
           _Pulse
             _Delay
       _Show_String_LCD
         _Send_Byte_LCD
           _Check_buttons
           _Delay
           _Pulse
             _Delay
   _STOP_I2C
     _HIGH_SCL_I2C
       _Delay_Fast
     _HIGH_SDA_I2C
       _Delay_Fast
     _LOW_SCL_I2C
       _Delay_Fast
     _LOW_SDA_I2C
       _Delay_Fast
   _Set_Coord_LCD
     _Send_Command_LCD
       _Check_buttons
       _Delay
       _Pulse
         _Delay
   _Show_String_LCD
     _Send_Byte_LCD
       _Check_buttons
       _Delay
       _Pulse
         _Delay
   ___lmul
   _init_I2C
   _power
     ___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A1       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1B      43       5       83.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      A1      12        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Sun Dec 19 20:54:41 2021

                             pc 0002                   _Init_READ_I2C 019E                              fsr 0004  
                           l183 029D                             l177 0360                             l257 0289  
                           l179 0372                             _RB1 0031                             _RB2 0032  
                           _RC4 003C                             u615 038D                             u635 02C9  
                           u805 042F                             u575 0116                             u595 0240  
                           u835 04A6                             u915 0563                             u765 02FA  
                           u925 0570                             u775 0302                             u945 05BC  
                           u795 042A                             u955 0606                             u985 0652  
                           u995 0668                             _deg 002A                             _ind 002C  
               __end_of_ACK_I2C 00E9                             fsr0 0004                             _str 0034  
                           indf 0000               ??_CLOCK_PULSE_I2C 0072                            l1421 021B  
                          l1341 0158                            l1317 02AF                            l1431 02E2  
                          l1511 045A                            l1417 0215                            l1265 010A  
                          l1513 04AD                            l1601 05A0                            l1419 01FE  
                          l1339 0157                            l1371 0276                            l1355 0123  
                          l1435 02F8                            l1507 0486                            l1269 00B0  
                          l1373 0293                            l1349 01D1                            l1701 07A0  
                          l1621 0643                            l1605 05AD                            l1367 0284  
                          l1391 033D                            l1383 0321                            l1551 07CA  
                          l1561 04EF                            l1553 04CB                            l1713 07D0  
                          l1643 06C3                            l1627 0676                            l1619 05D8  
                          l1397 034E                            l1653 06E2                            l1581 054B  
                          l1565 04FA                            l1671 072F                            l1639 06A0  
                          l1575 052A                            l1665 0710                            l1673 0735  
                          l1585 0558                            l1577 052F                            l1569 0513  
                          l1739 07DE                            l1683 0753                            l1659 0701  
                          l1695 0781                            l1689 0772                            u1005 0684  
                          u1015 0689                            u1105 0770                            u1025 06A5  
                          u1115 077F                            u1125 079E                            u1055 06E0  
                          u1065 06FF                            u1075 070E                            u1085 072D  
                          u1095 0751                            _cnt0 0026                            _cntA 0028  
                          _ind2 002E                            _main 04B6                      _Delay_Fast 00AF  
                          _stlb 0032                            _step 0030                            btemp 007E  
                          ltemp 007E                            start 0000                            ttemp 007E  
                          wtemp 007E                 __end_of_Clr_LCD 0186                __end_of_NACK_I2C 00F2  
             ??_IN_BYTE_ACK_I2C 0075                  ?_Init_READ_I2C 0078                 __end_of_Restart 0450  
              ?_Show_String_LCD 0077                           ?_main 0070                  _Init_WRITE_I2C 0319  
                         _PORTB 0006                           _PORTC 0007                _Send_Command_LCD 035F  
                         _TRISB 0086                           _TRISC 0087                           _Delay 010A  
           ___lmul@multiplicand 0074                    ?_IN_BYTE_I2C 0070                           _Pulse 01B6  
        ?_IN_BYTE_NACK_STOP_I2C 0070              __size_of_START_I2C 0013                           _power 0450  
                         main@i 005B                __end_of_STOP_I2C 019E                           pclath 000A  
                         ltemp0 007E                           ltemp1 0082                           ltemp2 0086  
                         ltemp3 0080                           ttemp0 007E                           ttemp1 0081  
                         ttemp2 0084                           ttemp3 0087                           ttemp4 007F  
                         status 0003                           wtemp0 007E                           wtemp1 0080  
                         wtemp2 0082                           wtemp3 0084                           wtemp4 0086  
                         wtemp5 0088                           wtemp6 007F                 __initialization 07ED  
                  __end_of_main 07ED            __end_of_HIGH_SDA_I2C 00C7                __end_of_Init_LCD 03F9  
          __end_of_HIGH_SCL_I2C 00BF                       ??_ACK_I2C 0072          __end_of_Init_WRITE_I2C 035F  
                        ??_main 0052                          ?_Delay 0070                          ?_Pulse 0072  
                  ?_LOW_SDA_I2C 0070          __size_of_Check_ACK_I2C 0011                    ?_LOW_SCL_I2C 0070  
                        ?_power 0048                   OUT_BYTE_I2C@t 0074                       ??_Clr_LCD 0079  
                        _Ch_ACK 0036                          _TRISC3 043B                          _TRISC4 043C  
                   ?_Delay_Fast 0070          IN_BYTE_NACK_STOP_I2C@t 0076            OUT_BYTE_PAGE_I2C@tmp 007A  
                     ??_Restart 007A                          Pulse@x 0072                 ??_Init_READ_I2C 007A  
                        ___lmul 02DA                  Set_Coord_LCD@i 0078                  Set_Coord_LCD@j 0077  
              __end_of_init_I2C 00CF               __end_of_START_I2C 016F                 ?_Init_WRITE_I2C 0075  
                        power@a 004E                          power@n 004C                          power@x 0048  
                     ?_NACK_I2C 0070         __end_of__initialization 07FC          __size_of_Check_buttons 002A  
                 __end_of_Delay 0119                  __pcstackCOMMON 0070                   _Check_ACK_I2C 014B  
                 __end_of_Pulse 01D1                 _CLOCK_PULSE_I2C 00D7                   __end_of_power 04B6  
                     ?_STOP_I2C 0070               _OUT_BYTE_PAGE_I2C 0247             __size_of_Delay_Fast 0008  
        __size_of_Send_Byte_LCD 003E                         ??_Delay 0072              ?_OUT_BYTE_PAGE_I2C 0070  
                       ??_Pulse 0074            __size_of_IN_BYTE_I2C 0029                         ??_power 007D  
                    __pbssBANK0 0020                      __pbssBANK1 00A0                      ??_NACK_I2C 0072  
           ??_OUT_BYTE_PAGE_I2C 0078                       ?_Init_LCD 0070         Show_String_LCD@mySTRING 0077  
               _IN_BYTE_ACK_I2C 00FD          __size_of_Set_Coord_LCD 0010           __size_of_HIGH_SDA_I2C 0008  
      __end_of_Send_Command_LCD 03AA           __size_of_HIGH_SCL_I2C 0008                  ?_Check_ACK_I2C 0070  
                    __pmaintext 04B6                         ?___lmul 0070                         _ACK_I2C 00E0  
                ___lmul@product 0079       __end_of_OUT_BYTE_PAGE_I2C 0271                   _Check_buttons 021D  
                    ??_STOP_I2C 0072         ??_IN_BYTE_NACK_STOP_I2C 0075                         _Adr_I2C 0024  
                  _HIGH_SDA_I2C 00BF                      __stringtab 0003                    _HIGH_SCL_I2C 00B7  
          __size_of_LOW_SDA_I2C 0011            __size_of_LOW_SCL_I2C 000B                      ??_Init_LCD 0077  
                       _Clr_LCD 016F                       ?_init_I2C 0070         __end_of_CLOCK_PULSE_I2C 00E0  
                 _Send_Byte_LCD 029C                         _Restart 03F9                 __size_of___lmul 003F  
                ?_Check_buttons 0070                   _Set_Coord_LCD 0119                         __ptext1 0450  
                       __ptext2 02DA                         __ptext3 00C7                         __ptext4 03F9  
                       __ptext5 016F                         __ptext6 01D1                         __ptext7 029C  
                       __ptext8 0119                         __ptext9 0247                         _int_arr 00A0  
                       _int_res 0020                IN_BYTE_ACK_I2C@t 0076         __end_of_IN_BYTE_ACK_I2C 010A  
      __size_of_Show_String_LCD 0023                         clrloop0 00D0            end_of_initialization 07FC  
              Send_Byte_LCD@tmp 0076                      ??_init_I2C 0070                    ??_Delay_Fast 0070  
                ?_Send_Byte_LCD 0070                 ??_Check_ACK_I2C 0072                    IN_BYTE_I2C@t 0074  
             __end_of_str_BLANK 0024                ??_Init_WRITE_I2C 0077                  ?_Set_Coord_LCD 0077  
    __size_of_OUT_BYTE_PAGE_I2C 002A                _Slave_ADR_RW_I2C 0037                       _START_I2C 015C  
            __end_of_Delay_Fast 00B7          Check_buttons@tmp_PORTB 0072          Check_buttons@tmp_TRISB 0073  
                 ?_OUT_BYTE_I2C 0070               __size_of_NACK_I2C 0009                ?_CLOCK_PULSE_I2C 0070  
               ??_Check_buttons 0070           __end_of_Init_READ_I2C 01B6                  __end_of___lmul 0319  
                    ?_START_I2C 0070               __size_of_STOP_I2C 0018             start_initialization 07ED  
              ?_IN_BYTE_ACK_I2C 0070                  ??_OUT_BYTE_I2C 0072                 ??_Send_Byte_LCD 0074  
             ??_Show_String_LCD 0079               __size_of_Init_LCD 004F               ?_Send_Command_LCD 0070  
                      ??___lmul 0078              ??_Send_Command_LCD 0074                 ??_Set_Coord_LCD 0078  
                      ?_ACK_I2C 0070                   ??_IN_BYTE_I2C 0072                       ___latbits 0002  
                 __pcstackBANK0 0048  __size_of_IN_BYTE_NACK_STOP_I2C 0011   __end_of_IN_BYTE_NACK_STOP_I2C 014B  
                      ?_Clr_LCD 0070               __size_of_init_I2C 0008                        ?_Restart 0070  
                     __pstrings 0003                     ??_START_I2C 0072                  __size_of_Delay 000F  
                 ??_LOW_SDA_I2C 0071                  __size_of_Pulse 001B                   ??_LOW_SCL_I2C 0071  
                __size_of_power 0066                 OUT_BYTE_I2C@tmp 0073                        _NACK_I2C 00E9  
           __end_of_IN_BYTE_I2C 021D                        Delay@tmp 0070                       clear_ram0 00CF  
          __end_of_OUT_BYTE_I2C 029C                       _str_BLANK 0013                        _STOP_I2C 0186  
              __size_of_ACK_I2C 0009                     __stringbase 0012                       main@i_166 005D  
                     main@i_167 005F                       main@i_168 0061                Check_buttons@tmp 0071  
                     _str_line0 0038                       _str_line1 00E0             Send_Command_LCD@tmp 0076  
             ___lmul@multiplier 0070                     Clr_LCD@str_ 0079                        _Init_LCD 03AA  
                   Delay_Fast@i 0070             __end_of_LOW_SDA_I2C 013A                __size_of_Clr_LCD 0017  
           __end_of_LOW_SCL_I2C 00FD                        Restart@i 007C           __end_of_Check_ACK_I2C 015C  
              __size_of_Restart 0057              __end_of__stringtab 0013                 _Show_String_LCD 01D1  
                      _main$616 0057                     _IN_BYTE_I2C 01F4                        __ptext10 019E  
                      __ptext11 0319                        __ptext20 013A                        __ptext12 015C  
                      __ptext21 0186                        __ptext13 0271                        __ptext30 00B7  
                      __ptext22 00E9                        __ptext14 014B                        __ptext31 00AF  
                      __ptext23 00FD                        __ptext15 03AA                        __ptext24 01F4  
                      __ptext16 035F                        __ptext25 00BF                        __ptext17 01B6  
                      __ptext26 00E0                        __ptext18 010A                        __ptext27 0129  
                      __ptext19 021D                        __ptext28 00D7                        __ptext29 00F2  
                      _init_I2C 00C7                   __size_of_main 0337                  IN_BYTE_I2C@tmp 0073  
      __size_of_CLOCK_PULSE_I2C 0009           __end_of_Check_buttons 0247         Init_WRITE_I2C@Adr_begin 0075  
       __size_of_Init_WRITE_I2C 0046       __size_of_Send_Command_LCD 004B                     _LOW_SDA_I2C 0129  
                   _LOW_SCL_I2C 00F2                   ?_HIGH_SDA_I2C 0070                   ?_HIGH_SCL_I2C 0070  
        __size_of_Init_READ_I2C 0018           __end_of_Send_Byte_LCD 02DA        __size_of_IN_BYTE_ACK_I2C 000D  
         __size_of_OUT_BYTE_I2C 002B                       stringcode 000D           __end_of_Set_Coord_LCD 0129  
       __end_of_Show_String_LCD 01F4          Init_READ_I2C@Adr_begin 0078                        stringdir 000D  
                      stringtab 0003                  ??_HIGH_SDA_I2C 0071                  ??_HIGH_SCL_I2C 0071  
                  _OUT_BYTE_I2C 0271           _IN_BYTE_NACK_STOP_I2C 013A  
